.TH "/home/dlebauer/dev/biocro/src/crocent.h" 3 "Fri Apr 3 2015" "Version 0.92" "BioCro" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/dlebauer/dev/biocro/src/crocent.h \- 
.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBdailyclimate\fP"
.br
.ti -1c
.RI "struct \fBcarbon\fP"
.br
.ti -1c
.RI "struct \fBminerals\fP"
.br
.ti -1c
.RI "struct \fBflowrestriction\fP"
.br
.ti -1c
.RI "struct \fBflow\fP"
.br
.ti -1c
.RI "struct \fBTempEffectParms\fP"
.br
.ti -1c
.RI "struct \fBSoilWaterEffectParms\fP"
.br
.ti -1c
.RI "struct \fBAnaerobicParms\fP"
.br
.ti -1c
.RI "struct \fBPHParms\fP"
.br
.ti -1c
.RI "struct \fBSymbNFixationParms\fP"
.br
.ti -1c
.RI "struct \fBErosionParms\fP"
.br
.ti -1c
.RI "struct \fBOrgLeachParms\fP"
.br
.ti -1c
.RI "struct \fBSoilTexture\fP"
.br
.ti -1c
.RI "struct \fBC13Parms\fP"
.br
.ti -1c
.RI "struct \fBInputToCropcent\fP"
.br
.ti -1c
.RI "struct \fBSoilEmissions\fP"
.br
.ti -1c
.RI "struct \fBBioCroToCropcentParms\fP"
.br
.ti -1c
.RI "struct \fBcropcentEnvironment\fP"
.br
.ti -1c
.RI "struct \fBstrucc1\fP"
.br
.ti -1c
.RI "struct \fBstrucc1::Flux1\fP"
.br
.ti -1c
.RI "struct \fBstrucc1::parms1\fP"
.br
.ti -1c
.RI "struct \fBstrucc2\fP"
.br
.ti -1c
.RI "struct \fBstrucc2::Flux2\fP"
.br
.ti -1c
.RI "struct \fBstrucc2::parms2\fP"
.br
.ti -1c
.RI "struct \fBwood1\fP"
.br
.ti -1c
.RI "struct \fBwood1::Flux3\fP"
.br
.ti -1c
.RI "struct \fBwood1::parms3\fP"
.br
.ti -1c
.RI "struct \fBwood2\fP"
.br
.ti -1c
.RI "struct \fBwood2::Flux4\fP"
.br
.ti -1c
.RI "struct \fBwood2::parms4\fP"
.br
.ti -1c
.RI "struct \fBwood3\fP"
.br
.ti -1c
.RI "struct \fBwood3::Flux5\fP"
.br
.ti -1c
.RI "struct \fBwood3::parms5\fP"
.br
.ti -1c
.RI "struct \fBmetabc1\fP"
.br
.ti -1c
.RI "struct \fBmetabc1::Flux6\fP"
.br
.ti -1c
.RI "struct \fBmetabc1::parms6\fP"
.br
.ti -1c
.RI "struct \fBmetabc2\fP"
.br
.ti -1c
.RI "struct \fBmetabc2::Flux7\fP"
.br
.ti -1c
.RI "struct \fBmetabc2::parms7\fP"
.br
.ti -1c
.RI "struct \fBsom1c1\fP"
.br
.ti -1c
.RI "struct \fBsom1c1::Flux8\fP"
.br
.ti -1c
.RI "struct \fBsom1c1::parms8\fP"
.br
.ti -1c
.RI "struct \fBsom2c1\fP"
.br
.ti -1c
.RI "struct \fBsom2c1::Flux9\fP"
.br
.ti -1c
.RI "struct \fBsom2c1::parms9\fP"
.br
.ti -1c
.RI "struct \fBsom1c2\fP"
.br
.ti -1c
.RI "struct \fBsom1c2::Flux10\fP"
.br
.ti -1c
.RI "struct \fBsom1c2::parms10\fP"
.br
.ti -1c
.RI "struct \fBsom2c2\fP"
.br
.ti -1c
.RI "struct \fBsom2c2::Flux11\fP"
.br
.ti -1c
.RI "struct \fBsom2c2::parms11\fP"
.br
.ti -1c
.RI "struct \fBsom3c\fP"
.br
.ti -1c
.RI "struct \fBsom3c::Flux12\fP"
.br
.ti -1c
.RI "struct \fBsom3c::parms12\fP"
.br
.ti -1c
.RI "struct \fBsiteparameters\fP"
.br
.ti -1c
.RI "struct \fBsoilprofile\fP"
.br
.ti -1c
.RI "struct \fBsoilprofile::profileproperties\fP"
.br
.ti -1c
.RI "struct \fBsoilprofile::profilepools\fP"
.br
.ti -1c
.RI "struct \fBsoilprofile::profilefluxes\fP"
.br
.ti -1c
.RI "struct \fBcropcentlayer\fP"
.br
.ti -1c
.RI "struct \fBleaf\fP"
.br
.ti -1c
.RI "struct \fBstem\fP"
.br
.ti -1c
.RI "struct \fBrhizome\fP"
.br
.ti -1c
.RI "struct \fBroot\fP"
.br
.ti -1c
.RI "struct \fBdailyvec\fP"
.br
.ti -1c
.RI "struct \fBlittervec\fP"
.br
.ti -1c
.RI "struct \fBDailyAutoResp\fP"
.br
.ti -1c
.RI "struct \fBmiscanthus\fP"
.br
.ti -1c
.RI "struct \fBsenthermaltemp\fP"
.br
.ti -1c
.RI "struct \fBcanopyparms\fP"
.br
.ti -1c
.RI "struct \fBrespirationParms\fP"
.br
.ti -1c
.RI "struct \fBrespirationParms::growth\fP"
.br
.ti -1c
.RI "struct \fBrespirationParms::maint\fP"
.br
.ti -1c
.RI "struct \fBc3tree\fP"
.br
.ti -1c
.RI "struct \fBmanagement\fP"
.br
.ti -1c
.RI "struct \fBmanagement::harvestparms\fP"
.br
.ti -1c
.RI "struct \fBmanagement::emergenceparms\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBMAXSOILLAY\fP   100 /* Maximum number of layers */"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBassignPools\fP (struct \fBcropcentlayer\fP *CROPCENT, double *sompoolsfromR)"
.br
.ti -1c
.RI "void \fBassignParms\fP (struct \fBcropcentlayer\fP *CROPCENT, double *somassignparmsfromR)"
.br
.ti -1c
.RI "double \fBtimescaling\fP (double k, double t)"
.br
.ti -1c
.RI "void \fBCROPCENTTimescaling\fP (struct \fBcropcentlayer\fP *CROPCENT)"
.br
.ti -1c
.RI "void \fBassignFluxRatios\fP (struct \fBcropcentlayer\fP *CROPCENT)"
.br
.ti -1c
.RI "void \fBassignENV\fP (struct \fBcropcentlayer\fP *CROPCENT, double *getsoiltexturefromR, double *getcropcentstatevarfromR, double *getbiocrotocropcentparmsfromR, double *geterosionparmsfromR, double *getc13parmsfromR, double *getleachingparmsfromR, double *getsymbnfixationparmsfromR)"
.br
.ti -1c
.RI "void \fBGetC13Parms\fP (struct \fBC13Parms\fP *temp, double *getc13parmsfromR)"
.br
.ti -1c
.RI "void \fBprintcropcentout\fP (struct \fBcropcentlayer\fP CROPCENT, double *totalSOC, double *\fBstrucc1\fP, double *\fBstrucc2\fP, double *\fBmetabc1\fP, double *\fBmetabc2\fP, double *\fBsom1c1\fP, double *\fBsom1c2\fP, double *\fBsom2c1\fP, double *\fBsom2c2\fP, double *\fBsom3c\fP, double *minN)"
.br
.ti -1c
.RI "void \fBGetBioCroToCropcentParms\fP (struct \fBBioCroToCropcentParms\fP *temp, double *getbiocrotocropcentparmsfromR)"
.br
.ti -1c
.RI "void \fBGetSymbNFixationParms\fP (struct \fBSymbNFixationParms\fP *temp, double *getsymbnfixationparmsfromR)"
.br
.ti -1c
.RI "void \fBGetErosionParms\fP (struct \fBErosionParms\fP *temp, double *geterosionparmsfromR)"
.br
.ti -1c
.RI "void \fBGetSoilTexture\fP (struct \fBSoilTexture\fP *temp, double *getsoiltexturefromR)"
.br
.ti -1c
.RI "void \fBGetCropCentStateVar\fP (struct \fBcropcentEnvironment\fP *ENV, double *getcropcentstatevarfromR)"
.br
.ti -1c
.RI "void \fBGetInFlowCERatio\fP (struct \fBflowrestriction\fP *INFLOWRESTRICT, struct \fBminerals\fP *output, struct \fBcropcentEnvironment\fP *ENV)"
.br
.ti -1c
.RI "double \fBGetMDR\fP (double a, double b, double x1, double x2, double soilrad)"
.br
.ti -1c
.RI "double \fBGetMTI\fP (double a, double b, double x1, double x2, double soilrad)"
.br
.ti -1c
.RI "void \fBreplaceMineralStruct\fP (struct \fBminerals\fP *FROM, struct \fBminerals\fP *TO)"
.br
.ti -1c
.RI "struct \fBflow\fP \fBGetLeachate\fP (double tcflow, struct \fBminerals\fP *E, double leachedWATER, double sand, struct \fBOrgLeachParms\fP *temp)"
.br
.ti -1c
.RI "double \fBweightavg\fP (double W1, double v1, double W2, double v2)"
.br
.ti -1c
.RI "void \fBUpdateDirectAbsorp\fP (struct \fBInputToCropcent\fP *INCROCENT, struct \fBBioCroToCropcentParms\fP *parms, struct \fBcropcentEnvironment\fP *ENV)"
.br
.ti -1c
.RI "void \fBUpdateCropcentPoolsFromBioCro\fP (struct \fBcropcentlayer\fP *CROPCENT, struct \fBInputToCropcent\fP *INCROPCENT)"
.br
.ti -1c
.RI "void \fBdecomposeCROPCENT\fP (struct \fBcropcentlayer\fP *CROPCENT, int woody, int Eflag)"
.br
.ti -1c
.RI "void \fBBiocroToCrocent\fP (double *stdedbc, double fallrate, double lignin, struct \fBminerals\fP *E, double isotoperatio, int surface, int woody, struct \fBInputToCropcent\fP *INCROCENT)"
.br
.ti -1c
.RI "int \fBCheckDecomposition\fP (struct \fBminerals\fP *source, struct \fBminerals\fP *\fBflow\fP, struct \fBcropcentEnvironment\fP *ENV, int Eflag)"
.br
.ti -1c
.RI "double \fBline\fP (double x, double x1, double y1, double x2, double y2)"
.br
.ti -1c
.RI "double \fBGetdefac\fP (struct \fBTempEffectParms\fP *Temp, struct \fBSoilWaterEffectParms\fP *swc, double RELWC, double TEMP)"
.br
.ti -1c
.RI "double \fBGetPHfac\fP (struct \fBPHParms\fP *PHEFF, double pH)"
.br
.ti -1c
.RI "double \fBGetAnerbFac\fP (struct \fBAnaerobicParms\fP *ANEREFF, double PET, double AWC, double drainage)"
.br
.ti -1c
.RI "void \fBupdateCEafterleachate\fP (struct \fBsom1c2\fP *\fBsom1c2\fP)"
.br
.ti -1c
.RI "void \fBdecomposeSTRUCC1\fP (struct \fBstrucc1\fP *\fBstrucc1\fP, struct \fBcropcentEnvironment\fP *ENV, int flag, int Eflag)"
.br
.ti -1c
.RI "void \fBdecomposeSTRUCC2\fP (struct \fBstrucc2\fP *\fBstrucc2\fP, struct \fBcropcentEnvironment\fP *ENV, int flag, int Eflag)"
.br
.ti -1c
.RI "void \fBdecomposeMETABC1\fP (struct \fBmetabc1\fP *\fBmetabc1\fP, struct \fBcropcentEnvironment\fP *ENV, int flag, int Eflag)"
.br
.ti -1c
.RI "void \fBdecomposeMETABC2\fP (struct \fBmetabc2\fP *\fBmetabc2\fP, struct \fBcropcentEnvironment\fP *ENV, int flag, int Eflag)"
.br
.ti -1c
.RI "void \fBdecomposeWOOD1\fP (struct \fBwood1\fP *\fBwood1\fP, struct \fBcropcentEnvironment\fP *ENV, int flag, int Eflag)"
.br
.ti -1c
.RI "void \fBdecomposeWOOD2\fP (struct \fBwood2\fP *\fBwood2\fP, struct \fBcropcentEnvironment\fP *ENV, int flag, int Eflag)"
.br
.ti -1c
.RI "void \fBdecomposeWOOD3\fP (struct \fBwood3\fP *\fBwood3\fP, struct \fBcropcentEnvironment\fP *ENV, int flag, int Eflag)"
.br
.ti -1c
.RI "void \fBdecomposeSOM1C1\fP (struct \fBsom1c1\fP *\fBsom1c1\fP, struct \fBcropcentEnvironment\fP *ENV, int flag, int Eflag)"
.br
.ti -1c
.RI "void \fBdecomposeSOM1C2\fP (struct \fBsom1c2\fP *\fBsom1c2\fP, struct \fBcropcentEnvironment\fP *ENV, int flag, int Eflag)"
.br
.ti -1c
.RI "void \fBdecomposeSOM2C2\fP (struct \fBsom2c2\fP *\fBsom2c2\fP, struct \fBcropcentEnvironment\fP *ENV, int flag, int Eflag)"
.br
.ti -1c
.RI "void \fBdecomposeSOM3C\fP (struct \fBsom3c\fP *\fBsom3c\fP, struct \fBcropcentEnvironment\fP *ENV, int flag, int Eflag)"
.br
.ti -1c
.RI "void \fBupdatecropcentpools\fP (struct \fBcropcentlayer\fP *CROPCENT)"
.br
.ti -1c
.RI "void \fBupdateMineralStructure\fP (struct \fBcarbon\fP *toupdateC, struct \fBminerals\fP *toupdateE, struct \fBcarbon\fP flowC, struct \fBminerals\fP flowE)"
.br
.ti -1c
.RI "void \fBupdateCarbonStructure\fP (struct \fBcarbon\fP *toupdateC, struct \fBcarbon\fP \fBflow\fP)"
.br
.ti -1c
.RI "double \fBCalculateGrowthResp\fP (double \fBnewbiomass\fP, double growthRespFactor)"
.br
.ti -1c
.RI "void \fBdailymiscanthus\fP (struct \fBmiscanthus\fP *\fBmiscanthus\fP, double coefs[25], double TherPrds[6], double TherTime, double Temp, double dailynetassim, struct \fBsenthermaltemp\fP *senparms, struct \fBcanopyparms\fP *\fBcanopyparms\fP, struct \fBfrostParms\fP *frostparms, int N, double delTT, struct \fBrespirationParms\fP *RESP, int emergence)"
.br
.ti -1c
.RI "double \fBgetThermalSenescence\fP (double criticalTT, double currentTT, double biomass, double dailyfractionalloss)"
.br
.ti -1c
.RI "double \fBcanopyNsenescence\fP (struct \fBleaf\fP *\fBleaf\fP, double SLA, double kN, double leafNsen)"
.br
.ti -1c
.RI "double \fBgetStemSenescence\fP (struct \fBstem\fP *\fBstem\fP, double criticalTT, double senefracion, double Temp, struct \fBfrostParms\fP *frostparms, double TT)"
.br
.ti -1c
.RI "double \fBgetRootSenescence\fP (struct \fBroot\fP *\fBroot\fP, double criticalTT, double senefracion, double Temp, struct \fBfrostParms\fP *frostparms, double TT)"
.br
.ti -1c
.RI "double \fBgetRhizomeSenescence\fP (struct \fBrhizome\fP *\fBrhizome\fP, double criticalTT, double senefracion, double Temp, struct \fBfrostParms\fP *frostparms, double TT)"
.br
.ti -1c
.RI "double \fBgetLeafSenescence\fP (struct \fBleaf\fP *\fBleaf\fP, double criticalTT, double senefracion, double Temp, struct \fBfrostParms\fP *frostparms, double TT, struct \fBcanopyparms\fP *canopyparm)"
.br
.ti -1c
.RI "void \fBupdatelittervec\fP (struct \fBlittervec\fP *\fBlittervec\fP, double \fBnewbiomass\fP, int N, double delTT)"
.br
.ti -1c
.RI "void \fBupdatebiomass\fP (double *res, double toadd, double toremove)"
.br
.ti -1c
.RI "void \fBdailymiscanthusupdate\fP (struct \fBmiscanthus\fP *\fBmiscanthus\fP, struct \fBmiscanthus\fP *deltamiscanthus)"
.br
.ti -1c
.RI "double \fBnewbiomass\fP (double AcanopyNet, double k, double GrowthRespCoeff)"
.br
.ti -1c
.RI "double \fBgetThermaltime\fP (double temp, double Tbase)"
.br
.ti -1c
.RI "void \fBUpdateStandingbiomass\fP (double *standing, double \fBnewbiomass\fP)"
.br
.ti -1c
.RI "void \fBUpdateStandingLeaf\fP (struct \fBleaf\fP *\fBleaf\fP, double \fBnewbiomass\fP, double deadleaf, double remobFactor)"
.br
.ti -1c
.RI "void \fBUpdateStandingStem\fP (struct \fBstem\fP *\fBstem\fP, double \fBnewbiomass\fP, double deadstem, double remobFactor)"
.br
.ti -1c
.RI "void \fBUpdateStandingRoot\fP (struct \fBroot\fP *\fBroot\fP, double \fBnewbiomass\fP, double deadroot, double remobFactor)"
.br
.ti -1c
.RI "void \fBUpdateStandingRhizome\fP (struct \fBrhizome\fP *\fBrhizome\fP, double \fBnewbiomass\fP, double deadrhizome, double remobFactor)"
.br
.ti -1c
.RI "void \fBupdatedailyvec\fP (struct \fBdailyvec\fP *\fBdailyvec\fP, double \fBnewbiomass\fP, double newlitter, int N, double delTT)"
.br
.ti -1c
.RI "void \fBcreateNULLmiscanthus\fP (struct \fBmiscanthus\fP *\fBmiscanthus\fP, int vecsize)"
.br
.ti -1c
.RI "void \fBgetdailyclimate\fP (struct \fBdailyclimate\fP *\fBdailyclimate\fP, int *doy, double *solar, double *temp, double *rh, double *windspeed, double *precip, int currenthour, int vecsize)"
.br
.ti -1c
.RI "int \fBCheckEmergence\fP (struct \fBdailyclimate\fP *\fBdailyclimate\fP, double EmergTemperature)"
.br
.ti -1c
.RI "void \fBupdatedormantstage\fP (struct \fBmiscanthus\fP *\fBmiscanthus\fP)"
.br
.ti -1c
.RI "void \fBdailyC3tree\fP (struct \fBc3tree\fP *\fBc3tree\fP, double coefs[25], double TherPrds[6], double TherTime, double Temp, double dailynetassim, struct \fBsenthermaltemp\fP *senparms, struct \fBcanopyparms\fP *\fBcanopyparms\fP, struct \fBfrostParms\fP *frostparms, struct \fBrespirationParms\fP *RESP)"
.br
.ti -1c
.RI "void \fBassignManagement\fP (struct \fBmanagement\fP *\fBmanagement\fP)"
.br
.ti -1c
.RI "void \fBupdateafterharvest\fP (struct \fBmiscanthus\fP *\fBmiscanthus\fP, struct \fBmanagement\fP *\fBmanagement\fP)"
.br
.ti -1c
.RI "void \fBupdateafteremergence\fP (struct \fBmiscanthus\fP *\fBmiscanthus\fP, struct \fBmanagement\fP *\fBmanagement\fP)"
.br
.ti -1c
.RI "void \fBgetsenescenceparms\fP (struct \fBsenthermaltemp\fP *senparms)"
.br
.ti -1c
.RI "void \fBgetfrostparms\fP (struct \fBfrostParms\fP *frostparms)"
.br
.ti -1c
.RI "void \fBUpdateC3treeAfterEmergence\fP (struct \fBc3tree\fP *willow, struct \fBmanagement\fP *\fBmanagement\fP)"
.br
.ti -1c
.RI "void \fBUpdateWillowAfterHarvest\fP (struct \fBc3tree\fP *willow, struct \fBmanagement\fP *\fBmanagement\fP)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define MAXSOILLAY   100 /* Maximum number of layers */"

.SH "Function Documentation"
.PP 
.SS "void assignENV (struct \fBcropcentlayer\fP *CROPCENT, double *getsoiltexturefromR, double *getcropcentstatevarfromR, double *getbiocrotocropcentparmsfromR, double *geterosionparmsfromR, double *getc13parmsfromR, double *getleachingparmsfromR, double *getsymbnfixationparmsfromR)"

.PP
.nf
436                                                                                                                                                               {
437  
438   GetBioCroToCropcentParms(&CROPCENT->BcroTOCentParms,getbiocrotocropcentparmsfromR);
439   GetSymbNFixationParms(&CROPCENT->ENV\&.NFIX,getsymbnfixationparmsfromR);
440   GetLeachingParms(&CROPCENT->ENV\&.ORGLECH,getleachingparmsfromR);
441   GetC13Parms(&CROPCENT->ENV\&.C13,getc13parmsfromR);
442   GetErosionParms(&CROPCENT->ENV\&.EROSION,geterosionparmsfromR);
443   GetSoilTexture(&CROPCENT->ENV\&.SOILTEX,getsoiltexturefromR);
444   GetCropCentStateVar(&CROPCENT->ENV,getcropcentstatevarfromR);
445   return;
446 }
.fi
.SS "void assignFluxRatios (struct \fBcropcentlayer\fP *CROPCENT)"

.PP
.nf
472 {
473   struct minerals *tmp;
474   // Updating unlabl and labl C ratio in each flux component based on  source
475   CROPCENT->strucc1\&.Flux\&.strucc1TOsom1c1\&.C\&.unlablTOlabl = CROPCENT->strucc1\&.C\&.unlablTOlabl;
476   CROPCENT->strucc1\&.Flux\&.strucc1TOsom2c1\&.C\&.unlablTOlabl = CROPCENT->strucc1\&.C\&.unlablTOlabl;
477   CROPCENT->strucc1\&.Flux\&.strucc1TOstrucc1\&.C\&.unlablTOlabl = CROPCENT->strucc1\&.C\&.unlablTOlabl;
478   CROPCENT->strucc1\&.Flux\&.strucc1TOmetabc1\&.C\&.unlablTOlabl = CROPCENT->strucc1\&.C\&.unlablTOlabl;
479   replaceMineralStruct(&CROPCENT->strucc1\&.E,&CROPCENT->strucc1\&.Flux\&.strucc1TOstrucc1\&.E);
480   
481   CROPCENT->strucc2\&.Flux\&.strucc2TOsom1c2\&.C\&.unlablTOlabl = CROPCENT->strucc2\&.C\&.unlablTOlabl;
482   CROPCENT->strucc2\&.Flux\&.strucc2TOsom2c2\&.C\&.unlablTOlabl = CROPCENT->strucc2\&.C\&.unlablTOlabl;
483   CROPCENT->strucc2\&.Flux\&.strucc2TOstrucc2\&.C\&.unlablTOlabl = CROPCENT->strucc2\&.C\&.unlablTOlabl;
484    replaceMineralStruct(&CROPCENT->strucc2\&.E,&CROPCENT->strucc2\&.Flux\&.strucc2TOstrucc2\&.E);
485    
486 //    replaceMineralStruct(&CROPCENT->metabc1\&.E,&CROPCENT->metabc1\&.Flux\&.metabc1TOmetabc1\&.E); this is repeated
487 //    replaceMineralStruct(&CROPCENT->metabc2\&.E,&CROPCENT->metabc2\&.Flux\&.metabc2TOmetabc2\&.E); this is repeated
488     
489   CROPCENT->wood1\&.Flux\&.wood1TOsom1c1\&.C\&.unlablTOlabl = CROPCENT->wood1\&.C\&.unlablTOlabl;
490   CROPCENT->wood1\&.Flux\&.wood1TOsom2c1\&.C\&.unlablTOlabl = CROPCENT->wood1\&.C\&.unlablTOlabl;
491   CROPCENT->wood1\&.Flux\&.wood1TOwood1\&.C\&.unlablTOlabl = CROPCENT->wood1\&.C\&.unlablTOlabl;
492   replaceMineralStruct(&CROPCENT->wood1\&.E,&CROPCENT->wood1\&.Flux\&.wood1TOwood1\&.E);
493   
494   CROPCENT->wood2\&.Flux\&.wood2TOsom1c1\&.C\&.unlablTOlabl = CROPCENT->wood2\&.C\&.unlablTOlabl;
495   CROPCENT->wood2\&.Flux\&.wood2TOsom2c1\&.C\&.unlablTOlabl = CROPCENT->wood2\&.C\&.unlablTOlabl;
496   CROPCENT->wood2\&.Flux\&.wood2TOwood2\&.C\&.unlablTOlabl = CROPCENT->wood2\&.C\&.unlablTOlabl;
497   replaceMineralStruct(&CROPCENT->wood2\&.E,&CROPCENT->wood2\&.Flux\&.wood2TOwood2\&.E);
498 
499   
500   CROPCENT->wood3\&.Flux\&.wood3TOsom1c2\&.C\&.unlablTOlabl = CROPCENT->wood3\&.C\&.unlablTOlabl;
501   CROPCENT->wood3\&.Flux\&.wood3TOsom2c2\&.C\&.unlablTOlabl = CROPCENT->wood3\&.C\&.unlablTOlabl;
502   CROPCENT->wood3\&.Flux\&.wood3TOwood3\&.C\&.unlablTOlabl = CROPCENT->wood3\&.C\&.unlablTOlabl;
503   replaceMineralStruct(&CROPCENT->wood3\&.E,&CROPCENT->wood3\&.Flux\&.wood3TOwood3\&.E);
504   
505   CROPCENT->metabc1\&.Flux\&.metabc1TOsom1c1\&.C\&.unlablTOlabl = CROPCENT->metabc1\&.C\&.unlablTOlabl;
506   CROPCENT->metabc1\&.Flux\&.metabc1TOmetabc1\&.C\&.unlablTOlabl = CROPCENT->metabc1\&.C\&.unlablTOlabl;
507   replaceMineralStruct(&CROPCENT->metabc1\&.E,&CROPCENT->metabc1\&.Flux\&.metabc1TOmetabc1\&.E);
508   
509   
510   CROPCENT->metabc2\&.Flux\&.metabc2TOsom1c2\&.C\&.unlablTOlabl = CROPCENT->metabc2\&.C\&.unlablTOlabl;
511   CROPCENT->metabc2\&.Flux\&.metabc2TOmetabc2\&.C\&.unlablTOlabl = CROPCENT->metabc2\&.C\&.unlablTOlabl;
512   replaceMineralStruct(&CROPCENT->metabc2\&.E,&CROPCENT->metabc2\&.Flux\&.metabc2TOmetabc2\&.E);
513   
514   CROPCENT->som1c1\&.Flux\&.som1c1TOsom2c1\&.C\&.unlablTOlabl = CROPCENT->som1c1\&.C\&.unlablTOlabl;
515   CROPCENT->som1c1\&.Flux\&.som1c1TOsom1c1\&.C\&.unlablTOlabl = CROPCENT->som1c1\&.C\&.unlablTOlabl;
516   replaceMineralStruct(&CROPCENT->som1c1\&.E,&CROPCENT->som1c1\&.Flux\&.som1c1TOsom1c1\&.E);
517   
518   CROPCENT->som2c1\&.Flux\&.som2c1TOsom1c1\&.C\&.unlablTOlabl = CROPCENT->som2c1\&.C\&.unlablTOlabl;
519   CROPCENT->som2c1\&.Flux\&.som2c1TOsom2c2\&.C\&.unlablTOlabl = CROPCENT->som2c1\&.C\&.unlablTOlabl; // due to mixing
520   CROPCENT->som2c1\&.Flux\&.som2c1TOsom2c1\&.C\&.unlablTOlabl = CROPCENT->som2c1\&.C\&.unlablTOlabl;
521   replaceMineralStruct(&CROPCENT->som2c1\&.E,&CROPCENT->som2c1\&.Flux\&.som2c1TOsom2c1\&.E);
522   
523   CROPCENT->som1c2\&.Flux\&.som1c2TOsom2c2\&.C\&.unlablTOlabl = CROPCENT->som1c2\&.C\&.unlablTOlabl;
524   CROPCENT->som1c2\&.Flux\&.som1c2TOsom3c\&.C\&.unlablTOlabl = CROPCENT->som1c2\&.C\&.unlablTOlabl;
525   CROPCENT->som1c2\&.Flux\&.som1c2TOleachate\&.C\&.unlablTOlabl = CROPCENT->som1c2\&.C\&.unlablTOlabl;
526   CROPCENT->som1c2\&.Flux\&.som1c2TOsom1c2\&.C\&.unlablTOlabl = CROPCENT->som1c2\&.C\&.unlablTOlabl;
527   replaceMineralStruct(&CROPCENT->som1c2\&.E,&CROPCENT->som1c2\&.Flux\&.som1c2TOsom1c2\&.E);
528    
529   CROPCENT->som2c2\&.Flux\&.som2c2TOsom1c2\&.C\&.unlablTOlabl = CROPCENT->som2c2\&.C\&.unlablTOlabl;
530   CROPCENT->som2c2\&.Flux\&.som2c2TOsom3c\&.C\&.unlablTOlabl = CROPCENT->som2c2\&.C\&.unlablTOlabl;
531   CROPCENT->som2c2\&.Flux\&.som2c2TOsom2c2\&.C\&.unlablTOlabl = CROPCENT->som2c2\&.C\&.unlablTOlabl;
532   replaceMineralStruct(&CROPCENT->som2c2\&.E,&CROPCENT->som2c2\&.Flux\&.som2c2TOsom2c2\&.E);
533   
534   CROPCENT->som3c\&.Flux\&.som3cTOsom1c2\&.C\&.unlablTOlabl = CROPCENT->som3c\&.C\&.unlablTOlabl;
535   CROPCENT->som3c\&.Flux\&.som3cTOsom3c\&.C\&.unlablTOlabl = CROPCENT->som3c\&.C\&.unlablTOlabl;
536   replaceMineralStruct(&CROPCENT->som3c\&.E,&CROPCENT->som3c\&.Flux\&.som3cTOsom3c\&.E);
537   
538   // updating CE ratio of each Flux based on Environmental condition and Restriction criteria
539   
540   // Cflow from strucc1 to metabc1 due to photodegradation
541   tmp=&CROPCENT->strucc1\&.E;
542   replaceMineralStruct(tmp,&CROPCENT->strucc1\&.Flux\&.strucc1TOmetabc1\&.E);
543   
544   
545   // Lets focus on all the fluxes to pool som1c1
546   GetInFlowCERatio(&CROPCENT->som1c1\&.INFLOW, tmp, &CROPCENT->ENV);
547   replaceMineralStruct(tmp,&CROPCENT->strucc1\&.Flux\&.strucc1TOsom1c1\&.E);
548   replaceMineralStruct(tmp,&CROPCENT->wood1\&.Flux\&.wood1TOsom1c1\&.E);
549   replaceMineralStruct(tmp,&CROPCENT->wood2\&.Flux\&.wood2TOsom1c1\&.E);
550   replaceMineralStruct(tmp,&CROPCENT->metabc1\&.Flux\&.metabc1TOsom1c1\&.E);
551   replaceMineralStruct(tmp,&CROPCENT->som2c1\&.Flux\&.som2c1TOsom1c1\&.E);
552    
553   // Get CE ratio of inflow to som2c1 pool and update all the fluxes E 
554   GetInFlowCERatio(&CROPCENT->som2c1\&.INFLOW, tmp, &CROPCENT->ENV);
555   replaceMineralStruct(tmp,&CROPCENT->strucc1\&.Flux\&.strucc1TOsom2c1\&.E);
556   replaceMineralStruct(tmp,&CROPCENT->wood1\&.Flux\&.wood1TOsom2c1\&.E);
557   replaceMineralStruct(tmp,&CROPCENT->wood2\&.Flux\&.wood2TOsom2c1\&.E);
558   replaceMineralStruct(tmp,&CROPCENT->som1c1\&.Flux\&.som1c1TOsom2c1\&.E);
559   
560   // Get CE ratio of inflow to som1c2 and update all the fluxes
561   GetInFlowCERatio(&CROPCENT->som1c2\&.INFLOW, tmp, &CROPCENT->ENV);
562   replaceMineralStruct(tmp,&CROPCENT->strucc2\&.Flux\&.strucc2TOsom1c2\&.E);
563   replaceMineralStruct(tmp,&CROPCENT->wood3\&.Flux\&.wood3TOsom1c2\&.E);
564   replaceMineralStruct(tmp,&CROPCENT->som2c2\&.Flux\&.som2c2TOsom1c2\&.E);
565   replaceMineralStruct(tmp,&CROPCENT->som3c\&.Flux\&.som3cTOsom1c2\&.E);
566   replaceMineralStruct(tmp,&CROPCENT->metabc2\&.Flux\&.metabc2TOsom1c2\&.E);
567   
568   // CE ratio of inflow to som2c2 and update all the fluxes
569   GetInFlowCERatio(&CROPCENT->som2c2\&.INFLOW, tmp, &CROPCENT->ENV);
570   replaceMineralStruct(tmp,&CROPCENT->strucc2\&.Flux\&.strucc2TOsom2c2\&.E);
571   replaceMineralStruct(tmp,&CROPCENT->wood3\&.Flux\&.wood3TOsom2c2\&.E);
572   replaceMineralStruct(tmp,&CROPCENT->som2c1\&.Flux\&.som2c1TOsom2c2\&.E); // due to mixing
573   replaceMineralStruct(tmp,&CROPCENT->som1c2\&.Flux\&.som1c2TOsom2c2\&.E); 
574   
575   // CE ratio of inflow to som3c and update all the fluxes
576   GetInFlowCERatio(&CROPCENT->som3c\&.INFLOW, tmp, &CROPCENT->ENV);
577   replaceMineralStruct(tmp,&CROPCENT->som2c2\&.Flux\&.som2c2TOsom3c\&.E); 
578   replaceMineralStruct(tmp,&CROPCENT->som1c2\&.Flux\&.som1c2TOsom3c\&.E); 
579 
580   return;
581 }
.fi
.SS "void assignManagement (struct \fBmanagement\fP *management)"

.PP
.nf
8 {
9 management->harvestparms\&.harvestdoy=300;
10 management->harvestparms\&.frleaf=1\&.0;
11 management->harvestparms\&.frleaflitter=0\&.0;
12 management->harvestparms\&.frstem=1\&.0;
13 management->harvestparms\&.frstemlitter=0\&.0;
14 management->harvestparms\&.frdeadroot=0\&.0;
15 management->harvestparms\&.frdeadrhizome=0\&.0;
16 
17 management->emergenceparms\&.minimumdoy=90;
18 management->emergenceparms\&.emergenceTemp=6\&.0;
19 management->emergenceparms\&.StoragetoLeaffraction=0\&.02;
20 management->emergenceparms\&.StemtoLeaffraction=0\&.02;
21 management->emergenceparms\&.plantingrate=20;
22 return;
23 }
.fi
.SS "void assignParms (struct \fBcropcentlayer\fP *CROPCENT, double *somassignparmsfromR)"

.PP
.nf
90 {//Rprintf("%f, %f, %f \n", *somassignparmsfromR,*(somassignparmsfromR+1),*(somassignparmsfromR+2));
91   CROPCENT->strucc1\&.parms\&.k=3\&.9;
92   CROPCENT->strucc1\&.parms\&.timestep=1440\&.0;
93   CROPCENT->strucc1\&.parms\&.strmx=5000\&.0;
94   CROPCENT->strucc1\&.parms\&.pligst=3\&.0;
95   CROPCENT->strucc1\&.parms\&.bioabsorp=100\&.0;
96   CROPCENT->strucc1\&.parms\&.rsplig=0\&.3;
97   CROPCENT->strucc1\&.parms\&.ps1co2=0\&.45;
98   CROPCENT->strucc1\&.parms\&.pmetabco2=0\&.48;
99   CROPCENT->strucc1\&.parms\&.maxphoto=0\&.0;
100   CROPCENT->strucc1\&.TEff\&.teff1=15\&.4;
101   CROPCENT->strucc1\&.TEff\&.teff2=11\&.75;
102   CROPCENT->strucc1\&.TEff\&.teff3=29\&.7;
103   CROPCENT->strucc1\&.TEff\&.teff4=0\&.031;
104   CROPCENT->strucc1\&.SWEFF\&.a=1\&.0;
105   CROPCENT->strucc1\&.SWEFF\&.b=1\&.0;
106   CROPCENT->strucc1\&.SWEFF\&.c=30\&.0;
107   CROPCENT->strucc1\&.SWEFF\&.d=-9\&.0;
108   CROPCENT->strucc1\&.PHEFF\&.a=4\&.0;
109   CROPCENT->strucc1\&.PHEFF\&.b=0\&.5;
110   CROPCENT->strucc1\&.PHEFF\&.c=1\&.1;
111   CROPCENT->strucc1\&.PHEFF\&.d=0\&.7;
112  
113 
114   
115   
116   CROPCENT->strucc2\&.parms\&.k=4\&.9;
117   CROPCENT->strucc2\&.parms\&.timestep=1440\&.0;
118   CROPCENT->strucc2\&.parms\&.strmx=5000\&.0;
119   CROPCENT->strucc2\&.parms\&.pligst=3\&.0;
120   CROPCENT->strucc2\&.parms\&.rsplig=0\&.3;
121   CROPCENT->strucc2\&.parms\&.ps1co2=0\&.55;
122   CROPCENT->strucc2\&.TEff\&.teff1=15\&.4;
123   CROPCENT->strucc2\&.TEff\&.teff2=11\&.75;
124   CROPCENT->strucc2\&.TEff\&.teff3=29\&.7;
125   CROPCENT->strucc2\&.TEff\&.teff4=0\&.031;
126   CROPCENT->strucc2\&.SWEFF\&.a=1\&.0;
127   CROPCENT->strucc2\&.SWEFF\&.b=1\&.0;
128   CROPCENT->strucc2\&.SWEFF\&.c=30\&.0;
129   CROPCENT->strucc2\&.SWEFF\&.d=9\&.0;
130   CROPCENT->strucc2\&.PHEFF\&.a=4\&.0;
131   CROPCENT->strucc2\&.PHEFF\&.b=0\&.5;
132   CROPCENT->strucc2\&.PHEFF\&.c=1\&.1;
133   CROPCENT->strucc2\&.PHEFF\&.d=0\&.7;
134   CROPCENT->strucc2\&.ANEREFF\&.ANEREF1=1\&.5;
135   CROPCENT->strucc2\&.ANEREFF\&.ANEREF2=3\&.0;
136   CROPCENT->strucc2\&.ANEREFF\&.ANEREF3=0\&.3;
137   
138   
139   CROPCENT->metabc1\&.parms\&.k=14\&.8;
140   CROPCENT->metabc1\&.parms\&.timestep=1440\&.0;
141   CROPCENT->metabc1\&.parms\&.pmco2=0\&.55;
142   CROPCENT->metabc1\&.parms\&.a=1\&.0;
143   CROPCENT->metabc1\&.parms\&.b=0\&.2;
144   CROPCENT->metabc1\&.parms\&.x1=0\&.0;
145   CROPCENT->metabc1\&.parms\&.x2=30000\&.0;
146   CROPCENT->metabc1\&.TEff\&.teff1=15\&.4;
147   CROPCENT->metabc1\&.TEff\&.teff2=11\&.75;
148   CROPCENT->metabc1\&.TEff\&.teff3=29\&.7;
149   CROPCENT->metabc1\&.TEff\&.teff4=0\&.031;
150   CROPCENT->metabc1\&.SWEFF\&.a=1\&.0;
151   CROPCENT->metabc1\&.SWEFF\&.b=1\&.0;
152   CROPCENT->metabc1\&.SWEFF\&.c=30\&.0;
153   CROPCENT->metabc1\&.SWEFF\&.d=-9\&.0;
154   CROPCENT->metabc1\&.PHEFF\&.a=4\&.8;
155   CROPCENT->metabc1\&.PHEFF\&.b=0\&.5;
156   CROPCENT->metabc1\&.PHEFF\&.c=1\&.14;
157   CROPCENT->metabc1\&.PHEFF\&.d=0\&.7;
158   
159   
160   CROPCENT->metabc2\&.parms\&.k=18\&.5;
161   CROPCENT->metabc2\&.parms\&.timestep=1440\&.0;
162   CROPCENT->metabc2\&.parms\&.pmco2=0\&.55;
163   CROPCENT->metabc2\&.TEff\&.teff1=15\&.4;
164   CROPCENT->metabc2\&.TEff\&.teff2=11\&.75;
165   CROPCENT->metabc2\&.TEff\&.teff3=29\&.7;
166   CROPCENT->metabc2\&.TEff\&.teff4=0\&.031;
167   CROPCENT->metabc2\&.SWEFF\&.a=1\&.0;
168   CROPCENT->metabc2\&.SWEFF\&.b=1\&.0;
169   CROPCENT->metabc2\&.SWEFF\&.c=30\&.0;
170   CROPCENT->metabc2\&.SWEFF\&.d=9\&.0;
171   CROPCENT->metabc2\&.PHEFF\&.a=4\&.8;
172   CROPCENT->metabc2\&.PHEFF\&.b=0\&.5;
173   CROPCENT->metabc2\&.PHEFF\&.c=1\&.14;
174   CROPCENT->metabc2\&.PHEFF\&.d=0\&.7;
175   CROPCENT->metabc2\&.ANEREFF\&.ANEREF1=1\&.5;
176   CROPCENT->metabc2\&.ANEREFF\&.ANEREF2=3\&.0;
177   CROPCENT->metabc2\&.ANEREFF\&.ANEREF3=0\&.3;
178   
179   CROPCENT->wood1\&.parms\&.k=3\&.9;
180   CROPCENT->wood1\&.parms\&.timestep=1440\&.0;
181   CROPCENT->wood1\&.parms\&.pligst=3\&.0;
182   CROPCENT->wood1\&.parms\&.rsplig=0\&.3;
183   CROPCENT->wood1\&.parms\&.ps1co2=0\&.45;
184   CROPCENT->wood1\&.TEff\&.teff1=15\&.4;
185   CROPCENT->wood1\&.TEff\&.teff2=11\&.75;
186   CROPCENT->wood1\&.TEff\&.teff3=29\&.7;
187   CROPCENT->wood1\&.TEff\&.teff4=0\&.031;
188   CROPCENT->wood1\&.SWEFF\&.a=1\&.0;
189   CROPCENT->wood1\&.SWEFF\&.b=1\&.0;
190   CROPCENT->wood1\&.SWEFF\&.c=30\&.0;
191   CROPCENT->wood1\&.SWEFF\&.d=9\&.0;
192   CROPCENT->wood1\&.PHEFF\&.a=4\&.0;
193   CROPCENT->wood1\&.PHEFF\&.b=0\&.5;
194   CROPCENT->wood1\&.PHEFF\&.c=1\&.1;
195   CROPCENT->wood1\&.PHEFF\&.d=0\&.7;
196   
197   
198   CROPCENT->wood2\&.parms\&.k=3\&.9;
199   CROPCENT->wood2\&.parms\&.timestep=1440\&.0;
200   CROPCENT->wood2\&.parms\&.pligst=3\&.0;
201   CROPCENT->wood2\&.parms\&.rsplig=0\&.3;
202   CROPCENT->wood2\&.parms\&.ps1co2=0\&.45;
203   CROPCENT->wood2\&.TEff\&.teff1=15\&.4;
204   CROPCENT->wood2\&.TEff\&.teff2=11\&.75;
205   CROPCENT->wood2\&.TEff\&.teff3=29\&.7;
206   CROPCENT->wood2\&.TEff\&.teff4=0\&.031;
207   CROPCENT->wood2\&.SWEFF\&.a=1\&.0;
208   CROPCENT->wood2\&.SWEFF\&.b=1\&.0;
209   CROPCENT->wood2\&.SWEFF\&.c=30\&.0;
210   CROPCENT->wood2\&.SWEFF\&.d=-9\&.0;
211   CROPCENT->wood2\&.PHEFF\&.a=4\&.0;
212   CROPCENT->wood2\&.PHEFF\&.b=0\&.5;
213   CROPCENT->wood2\&.PHEFF\&.c=1\&.1;
214   CROPCENT->wood2\&.PHEFF\&.d=0\&.7;
215   
216   
217   CROPCENT->wood3\&.parms\&.k=4\&.9;
218   CROPCENT->wood3\&.parms\&.timestep=1440\&.0;
219   CROPCENT->wood3\&.parms\&.pligst=3\&.0;
220   CROPCENT->wood3\&.parms\&.rsplig=0\&.3;
221   CROPCENT->wood3\&.parms\&.ps1co2=0\&.55;
222   CROPCENT->wood3\&.TEff\&.teff1=15\&.4;
223   CROPCENT->wood3\&.TEff\&.teff2=11\&.75;
224   CROPCENT->wood3\&.TEff\&.teff3=29\&.7;
225   CROPCENT->wood3\&.TEff\&.teff4=0\&.031;
226   CROPCENT->wood3\&.SWEFF\&.a=1\&.0;
227   CROPCENT->wood3\&.SWEFF\&.b=1\&.0;
228   CROPCENT->wood3\&.SWEFF\&.c=30\&.0;
229   CROPCENT->wood3\&.SWEFF\&.d=-9\&.0;
230   CROPCENT->wood3\&.PHEFF\&.a=4\&.0;
231   CROPCENT->wood3\&.PHEFF\&.b=0\&.5;
232   CROPCENT->wood3\&.PHEFF\&.c=1\&.1;
233   CROPCENT->wood3\&.PHEFF\&.d=0\&.7;
234   CROPCENT->wood3\&.ANEREFF\&.ANEREF1=1\&.5;
235   CROPCENT->wood3\&.ANEREFF\&.ANEREF2=3\&.0;
236   CROPCENT->wood3\&.ANEREFF\&.ANEREF3=0\&.3;
237   
238   
239   CROPCENT->som1c1\&.parms\&.k=6\&.0;
240   CROPCENT->som1c1\&.parms\&.timestep=1440\&.0;
241   CROPCENT->som1c1\&.parms\&.p1co2a=0\&.6;
242   CROPCENT->som1c1\&.parms\&.p1co2b=0\&.0;
243   CROPCENT->som1c1\&.parms\&.a=1\&.0;
244   CROPCENT->som1c1\&.parms\&.b=5\&.0;
245   CROPCENT->som1c1\&.parms\&.x1=0\&.0;
246   CROPCENT->som1c1\&.parms\&.x2=30000\&.0;
247   CROPCENT->som1c1\&.TEff\&.teff1=15\&.4;
248   CROPCENT->som1c1\&.TEff\&.teff2=11\&.75;
249   CROPCENT->som1c1\&.TEff\&.teff3=29\&.7;
250   CROPCENT->som1c1\&.TEff\&.teff4=0\&.031;
251   CROPCENT->som1c1\&.SWEFF\&.a=1\&.0;
252   CROPCENT->som1c1\&.SWEFF\&.b=1\&.0;
253   CROPCENT->som1c1\&.SWEFF\&.c=30\&.0;
254   CROPCENT->som1c1\&.SWEFF\&.d=-9\&.0;
255   CROPCENT->som1c1\&.PHEFF\&.a=4\&.0;
256   CROPCENT->som1c1\&.PHEFF\&.b=0\&.5;
257   CROPCENT->som1c1\&.PHEFF\&.c=1\&.1;
258   CROPCENT->som1c1\&.PHEFF\&.d=0\&.7;
259   CROPCENT->som1c1\&.INFLOW\&.maxCN= 15\&.0;
260   CROPCENT->som1c1\&.INFLOW\&.minCN=  6\&.0; 
261   CROPCENT->som1c1\&.INFLOW\&.minN=  1\&.0; 
262   CROPCENT->som1c1\&.INFLOW\&.maxCP=  150\&.0; 
263   CROPCENT->som1c1\&.INFLOW\&.minCP=  30\&.0; 
264   CROPCENT->som1c1\&.INFLOW\&.minP=  2\&.0; 
265   CROPCENT->som1c1\&.INFLOW\&.maxCS=  200\&.0; 
266   CROPCENT->som1c1\&.INFLOW\&.minCS=  50\&.0; 
267   CROPCENT->som1c1\&.INFLOW\&.minS=  2\&.0; 
268   CROPCENT->som1c1\&.INFLOW\&.maxCK=  0\&.0; 
269   CROPCENT->som1c1\&.INFLOW\&.minCK=  0\&.0; 
270   CROPCENT->som1c1\&.INFLOW\&.minK=  0\&.0; 
271   
272 
273   
274   CROPCENT->som2c1\&.parms\&.k=0\&.2;
275   CROPCENT->som2c1\&.parms\&.timestep=1440\&.0;
276   CROPCENT->som2c1\&.parms\&.p2co2=0\&.55;
277   CROPCENT->som2c1\&.parms\&.a=1\&.0;
278   CROPCENT->som2c1\&.parms\&.b=5\&.0;
279   CROPCENT->som2c1\&.parms\&.x1=0\&.0;
280   CROPCENT->som2c1\&.parms\&.x2=30000\&.0;
281   CROPCENT->som2c1\&.parms\&.mix=0\&.5;
282   CROPCENT->som2c1\&.TEff\&.teff1=15\&.4;
283   CROPCENT->som2c1\&.TEff\&.teff2=11\&.75;
284   CROPCENT->som2c1\&.TEff\&.teff3=29\&.7;
285   CROPCENT->som2c1\&.TEff\&.teff4=0\&.031;
286   CROPCENT->som2c1\&.SWEFF\&.a=1\&.0;
287   CROPCENT->som2c1\&.SWEFF\&.b=1\&.0;
288   CROPCENT->som2c1\&.SWEFF\&.c=30\&.0;
289   CROPCENT->som2c1\&.SWEFF\&.d=-9\&.0;
290   CROPCENT->som2c1\&.PHEFF\&.a=4\&.0;
291   CROPCENT->som2c1\&.PHEFF\&.b=0\&.5;
292   CROPCENT->som2c1\&.PHEFF\&.c=1\&.1;
293   CROPCENT->som2c1\&.PHEFF\&.d=0\&.7;
294   CROPCENT->som2c1\&.INFLOW \&.maxCN= 20\&.0;
295   CROPCENT->som2c1\&.INFLOW \&.minCN=  12\&.0;
296   CROPCENT->som2c1\&.INFLOW \&.minN=  1\&.0;
297   CROPCENT->som2c1\&.INFLOW \&.maxCP=  300\&.0;
298   CROPCENT->som2c1\&.INFLOW \&.minCP=  100\&.0;
299   CROPCENT->som2c1\&.INFLOW \&.minP=  2\&.0;
300   CROPCENT->som2c1\&.INFLOW \&.maxCS=  400\&.0; 
301   CROPCENT->som2c1\&.INFLOW \&.minCS=  100\&.0; 
302   CROPCENT->som2c1\&.INFLOW \&.minS=  2\&.0; 
303   CROPCENT->som2c1\&.INFLOW \&.maxCK=  0\&.0; 
304   CROPCENT->som2c1\&.INFLOW \&.minCK=  0\&.0; 
305   CROPCENT->som2c1\&.INFLOW \&.minK=  0\&.0; 
306   
307   
308   
309  
310   
311   CROPCENT->som1c2\&.parms\&.k=7\&.3;
312   CROPCENT->som1c2\&.parms\&.timestep=1440\&.0;
313   CROPCENT->som1c2\&.parms\&.peftxa=0\&.25;
314   CROPCENT->som1c2\&.parms\&.peftxb=0\&.75;
315   CROPCENT->som1c2\&.parms\&.p1co2a=0\&.17;
316   CROPCENT->som1c2\&.parms\&.p1co2b=0\&.68;
317   CROPCENT->som1c2\&.parms\&.ps1s3[0]=0\&.003;
318   CROPCENT->som1c2\&.parms\&.ps1s3[1]=0\&.032;
319   CROPCENT->som1c2\&.parms\&.animpt=5\&.0;
320   CROPCENT->som1c2\&.TEff\&.teff1=15\&.4;
321   CROPCENT->som1c2\&.TEff\&.teff2=11\&.75;
322   CROPCENT->som1c2\&.TEff\&.teff3=29\&.7;
323   CROPCENT->som1c2\&.TEff\&.teff4=0\&.031;
324   CROPCENT->som1c2\&.SWEFF\&.a=1\&.0;
325   CROPCENT->som1c2\&.SWEFF\&.b=1\&.0;
326   CROPCENT->som1c2\&.SWEFF\&.c=30\&.0;
327   CROPCENT->som1c2\&.SWEFF\&.d=-9\&.0;
328   CROPCENT->som1c2\&.PHEFF\&.a=4\&.0;
329   CROPCENT->som1c2\&.PHEFF\&.b=0\&.5;
330   CROPCENT->som1c2\&.PHEFF\&.c=1\&.1;
331   CROPCENT->som1c2\&.PHEFF\&.d=0\&.7;
332   CROPCENT->som1c2\&.ANEREFF\&.ANEREF1=1\&.5;
333   CROPCENT->som1c2\&.ANEREFF\&.ANEREF2=3\&.0;
334   CROPCENT->som1c2\&.ANEREFF\&.ANEREF3=0\&.3;
335   CROPCENT->som1c2\&.INFLOW \&.maxCN= 14\&.0;
336   CROPCENT->som1c2\&.INFLOW \&.minCN=  3\&.0; 
337   CROPCENT->som1c2\&.INFLOW \&.minN=  2\&.0; 
338   CROPCENT->som1c2\&.INFLOW \&.maxCP=  150\&.0; 
339   CROPCENT->som1c2\&.INFLOW \&.minCP=  30\&.0; 
340   CROPCENT->som1c2\&.INFLOW \&.minP=  2\&.0; 
341   CROPCENT->som1c2\&.INFLOW \&.maxCS=  200\&.0; 
342   CROPCENT->som1c2\&.INFLOW \&.minCS=  50\&.0; 
343   CROPCENT->som1c2\&.INFLOW \&.minS=  2\&.0; 
344   CROPCENT->som1c2\&.INFLOW \&.maxCK=  0\&.0; 
345   CROPCENT->som1c2\&.INFLOW \&.minCK=  0\&.0; 
346   CROPCENT->som1c2\&.INFLOW \&.minK=  0\&.0; 
347   
348   
349    
350   CROPCENT->som2c2\&.parms\&.k=0\&.25;
351   CROPCENT->som2c2\&.parms\&.timestep=1440\&.0;
352   CROPCENT->som2c2\&.parms\&.p2co2=0\&.55;
353   CROPCENT->som2c2\&.parms\&.ps2s3[0]=0\&.003;
354   CROPCENT->som2c2\&.parms\&.ps2s3[1]=0\&.009;
355   CROPCENT->som2c2\&.parms\&.animpt=5\&.0;
356   CROPCENT->som2c2\&.TEff\&.teff1=15\&.4;
357   CROPCENT->som2c2\&.TEff\&.teff2=11\&.75;
358   CROPCENT->som2c2\&.TEff\&.teff3=29\&.7;
359   CROPCENT->som2c2\&.TEff\&.teff4=\&.031;
360   CROPCENT->som2c2\&.SWEFF\&.a=1\&.0;
361   CROPCENT->som2c2\&.SWEFF\&.b=1\&.0;
362   CROPCENT->som2c2\&.SWEFF\&.c=30\&.0;
363   CROPCENT->som2c2\&.SWEFF\&.d=-9\&.0;
364   CROPCENT->som2c2\&.PHEFF\&.a=4\&.0;
365   CROPCENT->som2c2\&.PHEFF\&.b=0\&.5;
366   CROPCENT->som2c2\&.PHEFF\&.c=1\&.1;
367   CROPCENT->som2c2\&.PHEFF\&.d=0\&.7;
368   CROPCENT->som2c2\&.ANEREFF\&.ANEREF1=1\&.5;
369   CROPCENT->som2c2\&.ANEREFF\&.ANEREF2=3\&.0;
370   CROPCENT->som2c2\&.ANEREFF\&.ANEREF3=0\&.3;
371   CROPCENT->som2c2\&.INFLOW \&.maxCN= 20\&.0;
372   CROPCENT->som2c2\&.INFLOW \&.minCN=  12\&.0; 
373   CROPCENT->som2c2\&.INFLOW \&.minN=  2\&.0; 
374   CROPCENT->som2c2\&.INFLOW \&.maxCP=  400\&.0; 
375   CROPCENT->som2c2\&.INFLOW \&.minCP=  100\&.0; 
376   CROPCENT->som2c2\&.INFLOW \&.minP=  2\&.0; 
377   CROPCENT->som2c2\&.INFLOW \&.maxCS=  400\&.0; 
378   CROPCENT->som2c2\&.INFLOW \&.minCS=  100\&.0; 
379   CROPCENT->som2c2\&.INFLOW \&.minS=  2\&.0; 
380   CROPCENT->som2c2\&.INFLOW \&.maxCK=  0\&.0; 
381   CROPCENT->som2c2\&.INFLOW \&.minCK=  0\&.0; 
382   CROPCENT->som2c2\&.INFLOW \&.minK=  0\&.0; 
383   
384   
385   
386   CROPCENT->som3c\&.parms\&.k=0\&.0025;
387   CROPCENT->som3c\&.parms\&.timestep=1440\&.0;
388   CROPCENT->som3c\&.parms\&.p3co2=0\&.55;
389   CROPCENT->som3c\&.TEff\&.teff1=15\&.4;
390   CROPCENT->som3c\&.TEff\&.teff2=11\&.75;
391   CROPCENT->som3c\&.TEff\&.teff3=29\&.7;
392   CROPCENT->som3c\&.TEff\&.teff4=0\&.031;
393   CROPCENT->som3c\&.SWEFF\&.a=1\&.0;
394   CROPCENT->som3c\&.SWEFF\&.b=1\&.0;
395   CROPCENT->som3c\&.SWEFF\&.c=30\&.0;
396   CROPCENT->som3c\&.SWEFF\&.d=-9\&.0;
397   CROPCENT->som3c\&.PHEFF\&.a=3\&.0;
398   CROPCENT->som3c\&.PHEFF\&.b=0\&.5;
399   CROPCENT->som3c\&.PHEFF\&.c=1\&.10;
400   CROPCENT->som3c\&.PHEFF\&.d=0\&.7;
401   CROPCENT->som3c\&.ANEREFF\&.ANEREF1=1\&.5;
402   CROPCENT->som3c\&.ANEREFF\&.ANEREF2=3\&.0;
403   CROPCENT->som3c\&.ANEREFF\&.ANEREF3=0\&.3;
404   CROPCENT->som3c\&.INFLOW \&.maxCN= 8\&.0;
405   CROPCENT->som3c\&.INFLOW \&.minCN=  6\&.0; 
406   CROPCENT->som3c\&.INFLOW \&.minN=  2\&.0; 
407   CROPCENT->som3c\&.INFLOW \&.maxCP=  200\&.0; 
408   CROPCENT->som3c\&.INFLOW \&.minCP=  50\&.0; 
409   CROPCENT->som3c\&.INFLOW \&.minP=  2\&.0; 
410   CROPCENT->som3c\&.INFLOW \&.maxCS=  200\&.0; 
411   CROPCENT->som3c\&.INFLOW \&.minCS=  50\&.0; 
412   CROPCENT->som3c\&.INFLOW \&.minS=  2\&.0; 
413   CROPCENT->som3c\&.INFLOW \&.maxCK=  0\&.0; 
414   CROPCENT->som3c\&.INFLOW \&.minCK=  0\&.0; 
415   CROPCENT->som3c\&.INFLOW \&.minK=  0\&.0; 
416   return;
417 }
.fi
.SS "void assignPools (struct \fBcropcentlayer\fP *CROPCENT, double *sompoolsfromR)"

.PP
.nf
7 {
8   CROPCENT->strucc1\&.C\&.totalC=*(sompoolsfromR+0);
9   CROPCENT->strucc1\&.C\&.unlablTOlabl=*(sompoolsfromR+1);
10   CROPCENT->strucc1\&.E\&.CN=*(sompoolsfromR+2);
11   CROPCENT->strucc1\&.E\&.CP=*(sompoolsfromR+3);
12   CROPCENT->strucc1\&.E\&.CS=*(sompoolsfromR+4);
13   CROPCENT->strucc1\&.E\&.CK=*(sompoolsfromR+5);
14   CROPCENT->strucc1\&.lignin=*(sompoolsfromR+6);  
15   CROPCENT->strucc2\&.C\&.totalC=*(sompoolsfromR+7);
16   CROPCENT->strucc2\&.C\&.unlablTOlabl=*(sompoolsfromR+8);
17   CROPCENT->strucc2\&.E\&.CN=*(sompoolsfromR+9);
18   CROPCENT->strucc2\&.E\&.CP=*(sompoolsfromR+10);
19   CROPCENT->strucc2\&.E\&.CS=*(sompoolsfromR+11);
20   CROPCENT->strucc2\&.E\&.CK=*(sompoolsfromR+12);
21   CROPCENT->strucc2\&.lignin=*(sompoolsfromR+13);  
22   CROPCENT->metabc1\&.C\&.totalC=*(sompoolsfromR+14);
23   CROPCENT->metabc1\&.C\&.unlablTOlabl=*(sompoolsfromR+15);
24   CROPCENT->metabc1\&.E\&.CN=*(sompoolsfromR+16);
25   CROPCENT->metabc1\&.E\&.CP=*(sompoolsfromR+17);
26   CROPCENT->metabc1\&.E\&.CS=*(sompoolsfromR+18);
27   CROPCENT->metabc1\&.E\&.CK=*(sompoolsfromR+19);  
28   CROPCENT->metabc2\&.C\&.totalC=*(sompoolsfromR+20);
29   CROPCENT->metabc2\&.C\&.unlablTOlabl=*(sompoolsfromR+21);
30   CROPCENT->metabc2\&.E\&.CN=*(sompoolsfromR+22);
31   CROPCENT->metabc2\&.E\&.CP=*(sompoolsfromR+23);
32   CROPCENT->metabc2\&.E\&.CS=*(sompoolsfromR+24);
33   CROPCENT->metabc2\&.E\&.CK=*(sompoolsfromR+25);  
34   CROPCENT->wood1\&.C\&.totalC=*(sompoolsfromR+26);
35   CROPCENT->wood1\&.C\&.unlablTOlabl=*(sompoolsfromR+27);
36   CROPCENT->wood1\&.E\&.CN=*(sompoolsfromR+28);
37   CROPCENT->wood1\&.E\&.CP=*(sompoolsfromR+29);
38   CROPCENT->wood1\&.E\&.CS=*(sompoolsfromR+30);
39   CROPCENT->wood1\&.E\&.CK=*(sompoolsfromR+31);
40   CROPCENT->wood1\&.lignin=*(sompoolsfromR+32);  
41   CROPCENT->wood2\&.C\&.totalC=*(sompoolsfromR+33);
42   CROPCENT->wood2\&.C\&.unlablTOlabl=*(sompoolsfromR+34);
43   CROPCENT->wood2\&.E\&.CN=*(sompoolsfromR+35);
44   CROPCENT->wood2\&.E\&.CP=*(sompoolsfromR+36);
45   CROPCENT->wood2\&.E\&.CS=*(sompoolsfromR+37);
46   CROPCENT->wood2\&.E\&.CK=*(sompoolsfromR+38);
47   CROPCENT->wood2\&.lignin=*(sompoolsfromR+39);  
48   CROPCENT->wood3\&.C\&.totalC=*(sompoolsfromR+40);
49   CROPCENT->wood3\&.C\&.unlablTOlabl=*(sompoolsfromR+41);
50   CROPCENT->wood3\&.E\&.CN=*(sompoolsfromR+42);
51   CROPCENT->wood3\&.E\&.CP=*(sompoolsfromR+43);
52   CROPCENT->wood3\&.E\&.CS=*(sompoolsfromR+44);
53   CROPCENT->wood3\&.E\&.CK=*(sompoolsfromR+45);
54   CROPCENT->wood3\&.lignin=*(sompoolsfromR+46);  
55   CROPCENT->som1c1\&.C\&.totalC=*(sompoolsfromR+47);
56   CROPCENT->som1c1\&.C\&.unlablTOlabl=*(sompoolsfromR+48);
57   CROPCENT->som1c1\&.E\&.CN=*(sompoolsfromR+49);
58   CROPCENT->som1c1\&.E\&.CP=*(sompoolsfromR+50);
59   CROPCENT->som1c1\&.E\&.CS=*(sompoolsfromR+51);
60   CROPCENT->som1c1\&.E\&.CK=*(sompoolsfromR+52);  
61   CROPCENT->som1c2\&.C\&.totalC=*(sompoolsfromR+53);
62   CROPCENT->som1c2\&.C\&.unlablTOlabl=*(sompoolsfromR+54);
63   CROPCENT->som1c2\&.E\&.CN=*(sompoolsfromR+55);
64   CROPCENT->som1c2\&.E\&.CP=*(sompoolsfromR+56);
65   CROPCENT->som1c2\&.E\&.CS=*(sompoolsfromR+57);
66   CROPCENT->som1c2\&.E\&.CK=*(sompoolsfromR+58);  
67   CROPCENT->som2c1\&.C\&.totalC=*(sompoolsfromR+59);
68   CROPCENT->som2c1\&.C\&.unlablTOlabl=*(sompoolsfromR+60);
69   CROPCENT->som2c1\&.E\&.CN=*(sompoolsfromR+61);
70   CROPCENT->som2c1\&.E\&.CP=*(sompoolsfromR+62);
71   CROPCENT->som2c1\&.E\&.CS=*(sompoolsfromR+63);
72   CROPCENT->som2c1\&.E\&.CK=*(sompoolsfromR+64);  
73   CROPCENT->som2c2\&.C\&.totalC=*(sompoolsfromR+65);
74   CROPCENT->som2c2\&.C\&.unlablTOlabl=*(sompoolsfromR+66);
75   CROPCENT->som2c2\&.E\&.CN=*(sompoolsfromR+67);
76   CROPCENT->som2c2\&.E\&.CP=*(sompoolsfromR+68);
77   CROPCENT->som2c2\&.E\&.CS=*(sompoolsfromR+69);
78   CROPCENT->som2c2\&.E\&.CK=*(sompoolsfromR+70); 
79   CROPCENT->som3c\&.C\&.totalC=*(sompoolsfromR+71);
80   CROPCENT->som3c\&.C\&.unlablTOlabl=*(sompoolsfromR+72);
81   CROPCENT->som3c\&.E\&.CN=*(sompoolsfromR+73);
82   CROPCENT->som3c\&.E\&.CP=*(sompoolsfromR+74);
83   CROPCENT->som3c\&.E\&.CS=*(sompoolsfromR+75);
84   CROPCENT->som3c\&.E\&.CK=*(sompoolsfromR+76);
85   return;
86 }
.fi
.SS "void BiocroToCrocent (double *stdedbc, doublefallrate, doublelignin, struct \fBminerals\fP *E, doubleisotoperatio, intsurface, intwoody, struct \fBInputToCropcent\fP *INCROCENT)"

.PP
.nf
149 {
150   /***************************************************************
151   *   Purpose:
152   *   Purpose of this function is to take the daily output of BioCro
153   *   and create structure InputToCrocent that contains information
154   *   about characteristics of the litter and this structure can be used to
155   *   update Crocent pools
156   *   Note that we are not reducing standing biomass due to photodecomposition
157   *   we are only letting it fall based on fallrate to contribute to 
158   *   appropriate soilpools
159   *  
160   * 
161   *   Arguments
162   *   (1)  *stdedbc - This is a pointe to standing dead biomass\&. We are using
163   *         ponters here because we would like to update it after accouting for
164   *         reduction in fall rate
165   *   (2)  fallrate - This represents fraction of standing deadbiomasss
166   *         that will contribute to soil pools
167   *   (3)   lignin - This represents lignin content of the dead biomass
168   *   (4)   E representes CN,CP,CS, CK- represents nutrient:C ratio for the dead biomass
169   *   (5)   isotopratio - represents ratio of unlabled and labled C in 
170   *          the dead biomass
171   *   (6)   surface = 1 for surface input and 0 for below ground input 
172   *   (7)   woody =0 for non woody material and
173   *        woody =1 for branches
174   *        woody =2 for large wood
175   *        woody =3 for coarse roots
176   * 
177   *   We also need some environmental variables to evaluate photodegradation of
178   *   the standing biomass
179   * **********************************************************/
180       double temp;
181       if(fallrate>1\&.0) 
182       {
183         error("Fall rate is greather than 1\&.0");
184       }
185       
186       temp=(*stdedbc)*fallrate;  // Find how much litter goes to ground
187       (*stdedbc)=(*stdedbc)-temp; // update standing litter
188        
189        temp=temp*40; // unit conversion for Mg biomass/ha  to gram C/m2 for non woody
190       
191       INCROCENT->C\&.totalC =temp;
192       INCROCENT->C\&.unlablTOlabl = isotoperatio;
193       INCROCENT->E\&.CN= E->CN;
194       INCROCENT->E\&.CP= E->CP;
195       INCROCENT->E\&.CS= E->CS;
196       INCROCENT->E\&.CK= E->CK;
197       INCROCENT->lignin=lignin;
198       INCROCENT->surface=surface;
199       INCROCENT->woody=woody;
200       return;                                  
201 }
.fi
.SS "double CalculateGrowthResp (doublenewbiomass, doublegrowthRespFactor)"

.PP
.nf
457 {
458   double tmp;
459   tmp=(newbiomass>0\&.0)?newbiomass*growthRespCoeff:0\&.0;
460   return(tmp);
461 }
.fi
.SS "double canopyNsenescence (struct \fBleaf\fP *leaf, doubleSLA, doublekN, doubleleafNsen)"

.PP
.nf
263 {
264   /*****************************************************
265    * Purpose:
266    * 
267    * Purpose of this function is to calculate additional N senescence due to N deficiency
268    * It uses current value of average canopy N, use this and an exponential coefficient to
269    * determine vertical distribution of leaf N canopy\&.
270    * If this vertical distrbution results in leaf N of lower canopy which is less than a threshold value
271    *  then an leaf biomass (equivalent to LAI which is having lower than threshold leaf N conc\&.) is senesced
272    * Input
273    * leaf: pointer to leaf structure
274    * SLA: specific leaf area (in ha/Mg)
275    * kN:  coefficient determining exponentially declining leaf N conc (dimensionless)
276    * leafNsen: any leaf with leaf N conc lower than leafNsen will be senesced (mmol N m-2)
277    * Output/return
278    * Senesced leaf biomass (Mg/ha)
279    * ***************************************************/
280   double tmp;
281   double laimax,laicurrent;
282   double leafN;
283   leafN=leaf->biomassE\&.CN;
284   laimax=(1/kN)*log(1+(kN*leafN/leafNsen));
285   laicurrent=leaf->biomass*SLA;
286   if(laicurrent<=laimax)
287   {
288     tmp=0\&.0;
289   }
290   else
291   {
292     tmp=(laicurrent-laimax)/SLA;
293   }
294   return(tmp);
295 }
.fi
.SS "int CheckDecomposition (struct \fBminerals\fP *source, struct \fBminerals\fP *flow, struct \fBcropcentEnvironment\fP *ENV, intEflag)"

.SS "int CheckEmergence (struct \fBdailyclimate\fP *dailyclimate, doubleEmergTemperature)"

.PP
.nf
674 {
675   int flag;
676   if(((dailyclimate->minimumTemp)>EmergTemperature)&&((dailyclimate->doy)>90)&&((dailyclimate->doy)<270)){
677     flag =1;
678   }
679   else
680   {
681     flag = 0;
682   }
683   return(flag);
684 }
.fi
.SS "void createNULLmiscanthus (struct \fBmiscanthus\fP *miscanthus, intvecsize)"

.PP
.nf
12 {
13    int i;
14    miscanthus->leafvec=malloc((vecsize+1)*sizeof(*miscanthus->leafvec));
15    miscanthus->stemvec=malloc((vecsize+1)*sizeof(*miscanthus->stemvec));
16    miscanthus->rootvec=malloc((vecsize+1)*sizeof(*miscanthus->rootvec));
17    miscanthus->rhizomevec=malloc((vecsize+1)*sizeof(*miscanthus->rhizomevec));
18   
19    for (i = 0; i<=vecsize;i++)
20    {
21       miscanthus->leafvec[i]\&.newbiomass=0\&.0;
22       miscanthus->leafvec[i]\&.newlitter=0\&.0;
23        miscanthus->leafvec[i]\&.ageinTT=0\&.0;
24        miscanthus->stemvec[i]\&.newbiomass=0\&.0;
25       miscanthus->stemvec[i]\&.newlitter=0\&.0;
26        miscanthus->stemvec[i]\&.ageinTT=0\&.0;
27        miscanthus->rootvec[i]\&.newbiomass=0\&.0;
28       miscanthus->rootvec[i]\&.newlitter=0\&.0;
29        miscanthus->rootvec[i]\&.ageinTT=0\&.0;
30        miscanthus->rhizomevec[i]\&.newbiomass=0\&.0;
31       miscanthus->rhizomevec[i]\&.newlitter=0\&.0;
32        miscanthus->rhizomevec[i]\&.ageinTT=0\&.0;
33        
34    }
35    
36    miscanthus->leaf\&.biomass=0\&.0;
37    miscanthus->stem\&.biomass=0\&.0;
38    miscanthus->root\&.biomass=0\&.0;
39    miscanthus->rhizome\&.biomass=0\&.0;
40    miscanthus->leaf\&.litter=0\&.0;
41    miscanthus->stem\&.litter=0\&.0;
42    miscanthus->root\&.litter=0\&.0;
43    miscanthus->rhizome\&.litter=0\&.0;
44    miscanthus->rhizome\&.carbohydratefraction=0\&.6; // Lets assume that in the beginning carbohydrate fraction of dry biomass is  60%
45    return;
46 }
.fi
.SS "void CROPCENTTimescaling (struct \fBcropcentlayer\fP *CROPCENT)"

.PP
.nf
419                                                         {
420 CROPCENT->strucc1\&.parms\&.k= timescaling(CROPCENT->strucc1\&.parms\&.k,CROPCENT->strucc1\&.parms\&.timestep);
421 CROPCENT->strucc2\&.parms\&.k= timescaling(CROPCENT->strucc2\&.parms\&.k,CROPCENT->strucc2\&.parms\&.timestep);
422 CROPCENT->metabc1\&.parms\&.k= timescaling(CROPCENT->metabc1\&.parms\&.k,CROPCENT->metabc1\&.parms\&.timestep);
423 CROPCENT->metabc2\&.parms\&.k= timescaling(CROPCENT->metabc2\&.parms\&.k,CROPCENT->metabc2\&.parms\&.timestep);
424 CROPCENT->wood1\&.parms\&.k= timescaling(CROPCENT->wood1\&.parms\&.k,CROPCENT->wood1\&.parms\&.timestep);
425 CROPCENT->wood2\&.parms\&.k= timescaling(CROPCENT->wood2\&.parms\&.k,CROPCENT->wood2\&.parms\&.timestep);
426 CROPCENT->wood3\&.parms\&.k= timescaling(CROPCENT->wood3\&.parms\&.k,CROPCENT->wood3\&.parms\&.timestep);
427 CROPCENT->som1c1\&.parms\&.k= timescaling(CROPCENT->som1c1\&.parms\&.k,CROPCENT->som1c1\&.parms\&.timestep);
428 CROPCENT->som2c1\&.parms\&.k= timescaling(CROPCENT->som2c1\&.parms\&.k,CROPCENT->som2c1\&.parms\&.timestep);
429 CROPCENT->som1c2\&.parms\&.k= timescaling(CROPCENT->som1c2\&.parms\&.k,CROPCENT->som1c2\&.parms\&.timestep);
430 CROPCENT->som2c2\&.parms\&.k= timescaling(CROPCENT->som2c2\&.parms\&.k,CROPCENT->som2c2\&.parms\&.timestep);
431 CROPCENT->som3c\&.parms\&.k= timescaling(CROPCENT->som3c\&.parms\&.k,CROPCENT->som3c\&.parms\&.timestep);
432   return;
433 }
.fi
.SS "void dailyC3tree (struct \fBc3tree\fP *c3tree, doublecoefs[25], doubleTherPrds[6], doubleTherTime, doubleTemp, doubledailynetassim, struct \fBsenthermaltemp\fP *senparms, struct \fBcanopyparms\fP *canopyparms, struct \fBfrostParms\fP *frostparms, struct \fBrespirationParms\fP *RESP)"

.SS "void dailymiscanthus (struct \fBmiscanthus\fP *miscanthus, doublecoefs[25], doubleTherPrds[6], doubleTherTime, doubleTemp, doubledailynetassim, struct \fBsenthermaltemp\fP *senparms, struct \fBcanopyparms\fP *canopyparms, struct \fBfrostParms\fP *frostparms, intN, doubledelTT, struct \fBrespirationParms\fP *RESP, intemergence)"

.PP
.nf
467 {
468 
469   double remobStem,remobRoot,remobRhiz;
470   remobStem=canopyparms->remobFac;
471   remobRoot=canopyparms->remobFac;
472   remobRhiz=canopyparms->remobFac;
473   double deadleaf,deadstem,deadroot,deadrhiz;
474   double dailysenesced;
475   double remobilized;
476   double totalassimilate;
477   struct crop_phenology cropdbp;
478   double newleaf,newstem,newrhiz,newroot;
479   double kLeaf,kStem,kRoot,kRhizome;
480   double newLeaf,newStem,newRhizome,newRoot;
481   double newLeaflitter,newStemlitter,newRhizomelitter,newRootlitter;
482   double totalmaintenance;
483   double RemobilizedFromLitter,RemobilizedFromRhizome;
484   double SumofKpart,Dailybalance;
485 
486 // double getStemSenescence(struct stem *stem, struct littervec *littervec, double criticalTT, double Temp, double remobfa, struct frostParms *frostparms, int N)
487  // calculate senescing biomass for today based on Thermal Time, N conce\&. and Frost conditions 
488  
489    getfrostparms(frostparms);
490    getsenescenceparms(senparms);
491    
492    
493    if(emergence ==1)
494    {
495           cropcent_dbp(coefs,TherPrds,TherTime, &cropdbp);
496           kLeaf = cropdbp\&.DBP\&.kLeaf;
497           kStem = cropdbp\&.DBP\&.kStem;
498           kRoot = cropdbp\&.DBP\&.kRoot;
499           kRhizome = cropdbp\&.DBP\&.kRhiz;
500 
501            // calculate senescence, Remobilization due to senescece will contribute to growth of new plant organs
502           deadleaf=getLeafSenescence(&miscanthus->leaf,senparms->leafcriticalT,senparms->leaffr, Temp, frostparms,TherTime,canopyparms);
503           deadstem=getStemSenescence(&miscanthus->stem,senparms->stemcriticalT,senparms->stemfr, Temp, frostparms,TherTime);
504           deadroot=getRootSenescence(&miscanthus->root, senparms->rootcriticalT,senparms->rootfr, Temp, frostparms,TherTime);
505           deadrhiz=getRhizomeSenescence(&miscanthus->rhizome,senparms->rhizomecriticalT,senparms->rhizomefr, Temp, frostparms,TherTime);    
506           dailysenesced=deadleaf+deadstem+deadroot+deadrhiz;
507           //Calculate how much of dead biomass is remobilized based on a remobilization factor
508           RemobilizedFromLitter = dailysenesced*canopyparms->remobFac; // assuming all the dead organs remobilizes same fraction
509          
510          // Check and calculate whether carbohydrate in Rhizome is being remobilized baksed on K(negative value of partitioning coefficient)
511          if(kRhizome>=0)
512           {
513             RemobilizedFromRhizome=0;          
514           }
515           else
516           {
517             // I need to multiply by (-1) because kRhizome is negative
518             RemobilizedFromRhizome=(-1)*kRhizome*miscanthus->rhizome\&.biomass;
519           }
520           
521           // Total maintenance respiration, which is a temperature dependet function of existing biomass
522           totalmaintenance=miscanthus->autoresp\&.stemmaint+miscanthus->autoresp\&.rootmaint+miscanthus->autoresp\&.rhizomemaint;
523           // Total assimilate includes net canopy assimilation and remobilization from litter and rhizome, also it must satisfy total maintenance respiration
524           totalassimilate=dailynetassim+RemobilizedFromLitter+RemobilizedFromRhizome-totalmaintenance;
525           
526           // If total assimilate for growth (& growth respiration) is negative then this is provided by rhizome only (storage carb\&.) leaving other parts intacts
527           if(totalassimilate<=0\&.0)
528           {
529           newLeaf=0\&.0;
530           miscanthus->autoresp\&.stemgrowth=0\&.0;
531           newStem=0\&.0;
532           miscanthus->autoresp\&.rootgrowth=0\&.0;
533           newRoot=0\&.0;
534           miscanthus->autoresp\&.rhizomegrowth=0\&.0;
535           // New rhizome must provide for total negative assimilate\&. Also we need to update remobilization
536           newRhizome=totalassimilate+RemobilizedFromRhizome;
537           miscanthus->autoresp\&.rhizomegrowth=0\&.0;
538           }
539           else
540           {
541           SumofKpart=((kLeaf>0)?kLeaf:0)+((kStem>0)?kStem:0)+((kRoot>0)?kRoot:0)+((kRhizome>0)?kRhizome:0);
542             if(SumofKpart!=1)
543             {
544             error("Sum of Positive partitioning coefficient is not one");
545             }
546           newLeaf=newbiomass(totalassimilate,kLeaf,0\&.0);          
547           newStem=newbiomass(totalassimilate,kStem,RESP->growth\&.stem);
548           miscanthus->autoresp\&.stemgrowth=CalculateGrowthResp(newStem,RESP->growth\&.stem);
549           newRoot=newbiomass(totalassimilate,kRoot,RESP->growth\&.root);
550           miscanthus->autoresp\&.rootgrowth=CalculateGrowthResp(newRoot,RESP->growth\&.stem);
551           // Make sure that remobilization termis taken care of in the calculation of newRhizome
552           newRhizome=(kRhizome>0)?newbiomass(totalassimilate,kRhizome,RESP->growth\&.rhizome):(-1)*RemobilizedFromRhizome;
553           
554           miscanthus->autoresp\&.rhizomegrowth=CalculateGrowthResp(newRhizome,RESP->growth\&.stem);
555           }
556            
557          // Now we know growth respiration of each component & we can update total autotrophic respiration
558           miscanthus->autoresp\&.total=miscanthus->autoresp\&.leafdarkresp+totalmaintenance+miscanthus->autoresp\&.stemgrowth+miscanthus->autoresp\&.rootgrowth+miscanthus->autoresp\&.rhizomegrowth;
559          // Here, we are updating net primary productivity
560          miscanthus->NPP=miscanthus->GPP-miscanthus->autoresp\&.total;
561           
562         // Here, we are evaluating new litter, This is fraction of dead biomass which was not remobilized  
563           newLeaflitter=(deadleaf>0)?deadleaf*(1-canopyparms->remobFac):0\&.0;
564           newStemlitter=(deadleaf>0)?deadstem*(1-canopyparms->remobFac):0\&.0;
565           newRootlitter=(deadroot>0)?deadroot*(1-canopyparms->remobFac):0\&.0;
566           newRhizomelitter=(deadrhiz>0)?deadrhiz*(1-canopyparms->remobFac):0\&.0;
567           
568 
569           Dailybalance=newLeaf- deadleaf+newRoot- deadroot+newStem- deadstem+newRhizome- deadrhiz+newLeaflitter+newStemlitter+newRootlitter + newRhizomelitter;
570          Dailybalance=Dailybalance-miscanthus->NPP;
571          if(Dailybalance>1e-10)
572           {
573           Rprintf("\nNPP and Daily Change inBiomass is not matching & difference is %f\n", Dailybalance);
574           Rprintf("Thermal Time = %f, GPP = %f, Autotrophic Respiration = %f, NPP = %f, Remobilized from Litter = %f, Remobilized from Rhizome = %f \n", TherTime,miscanthus->GPP, miscanthus->autoresp\&.total,miscanthus->NPP,RemobilizedFromLitter,RemobilizedFromRhizome);
575           Rprintf("kLeaf=%f, kstem=%f, kRoot=%f, kRhizome=%f \n", kLeaf, kStem, kRoot,kRhizome);
576           Rprintf("NewLeaf = %f Dead Leaf=%f, newLeafLitter=%f\n",newLeaf, deadleaf,newLeaflitter); 
577           Rprintf("NewStem = %f Dead Stem=%f, newStemLitter=%f\n",newStem, deadstem,newStemlitter);
578           Rprintf("NewRoot = %f Dead Root=%f, newRootLitter=%f\n",newRoot, deadroot,newRootlitter);
579           Rprintf("NewRhizome = %f Dead Rhizome=%f, newRhizomeLitter=%f\n",newRhizome, deadrhiz,newRhizomelitter);
580           Rprintf("LeafDarkResp=%f, Total maintenance (ExceptLeaf) = %f, StemGrowthResp=%f, RootGrowthResp=%f, RhizGrowthResp=%f\n",miscanthus->autoresp\&.leafdarkresp,totalmaintenance,miscanthus->autoresp\&.stemgrowth,miscanthus->autoresp\&.rootgrowth,miscanthus->autoresp\&.rhizomegrowth);
581               Rprintf("Daily Biomas Balance Gain = %f", Dailybalance);
582               Rprintf("--------Emergence= %i-, N= %i---------------------\n",emergence, N);
583           }
584 
585           // Adding new biomass of green components
586           UpdateStandingbiomass(&miscanthus->leaf\&.biomass, newLeaf);
587           UpdateStandingbiomass(&miscanthus->stem\&.biomass, newStem);
588           UpdateStandingbiomass(&miscanthus->root\&.biomass, newRoot);
589           UpdateStandingbiomass(&miscanthus->rhizome\&.biomass, newRhizome);
590           
591           // Subtracting dead biomass from the green components
592           // before thant I must multiply all the dead leaf components by -1, so I can still use 
593           // Updatestandingbiomass function for SUBTRACTING instead of ADDING
594           
595           deadleaf*=(-1);
596           deadstem*=(-1);
597           deadroot*=(-1);
598           deadrhiz*=(-1);
599           
600           UpdateStandingbiomass(&miscanthus->leaf\&.biomass, deadleaf);
601           UpdateStandingbiomass(&miscanthus->stem\&.biomass, deadstem);
602           UpdateStandingbiomass(&miscanthus->root\&.biomass, deadroot);
603           UpdateStandingbiomass(&miscanthus->rhizome\&.biomass, deadrhiz);
604           
605           
606           // Updating standing biomass of litter  components
607           UpdateStandingbiomass(&miscanthus->leaf\&.litter, newLeaflitter);
608           UpdateStandingbiomass(&miscanthus->stem\&.litter, newStemlitter);
609           UpdateStandingbiomass(&miscanthus->root\&.litter, newRootlitter);
610           UpdateStandingbiomass(&miscanthus->rhizome\&.litter, newRhizomelitter);
611           
612         
613           
614    }
615    else // Dormant stange simulation, where rhizome provides for respiration loss
616    {
617           miscanthus->stem\&.biomass=0\&.0;
618           miscanthus->autoresp\&.stemgrowth=0;
619           miscanthus->leaf\&.biomass=0\&.0;
620           miscanthus->autoresp\&.leafdarkresp=0\&.0;
621           
622           //Perhaps I can implement senescence rate of belowground components during dormant stage?
623 //          miscanthus->root\&.biomass=0\&.0;
624           miscanthus->autoresp\&.rootgrowth=0;
625 //          miscanthus->rhizome\&.biomass=0\&.0;
626           miscanthus->autoresp\&.rhizomegrowth=0;
627           
628           totalmaintenance=miscanthus->autoresp\&.stemmaint+miscanthus->autoresp\&.rootmaint+miscanthus->autoresp\&.rhizomemaint;
629           miscanthus->autoresp\&.total=miscanthus->autoresp\&.leafdarkresp+totalmaintenance+miscanthus->autoresp\&.stemgrowth+miscanthus->autoresp\&.rootgrowth+miscanthus->autoresp\&.rhizomegrowth;
630           miscanthus->NPP=miscanthus->GPP-miscanthus->autoresp\&.total;
631           newRhizome=(-1)* miscanthus->autoresp\&.total;
632           UpdateStandingbiomass(&miscanthus->rhizome\&.biomass, newRhizome);
633           if(miscanthus->rhizome\&.biomass <0)error("rhizome has become negative");
634    } 
635     return;
636 }
.fi
.SS "void dailymiscanthusupdate (struct \fBmiscanthus\fP *miscanthus, struct \fBmiscanthus\fP *deltamiscanthus)"

.PP
.nf
730 {
731   double toadd,toremove;
732   
733   toadd=deltamiscanthus->leaf\&.biomass;
734   toremove=deltamiscanthus->leaf\&.litter;
735   updatebiomass(&miscanthus->leaf\&.biomass,toadd,toremove);
736   updatebiomass(&miscanthus->leaf\&.litter,toremove,0\&.0);
737   
738   toadd=deltamiscanthus->stem\&.biomass;
739   toremove=deltamiscanthus->stem\&.litter;
740   updatebiomass(&miscanthus->stem\&.biomass,toadd,toremove);
741   updatebiomass(&miscanthus->stem\&.litter,toremove,0\&.0);
742   
743   toadd=deltamiscanthus->root\&.biomass;
744   toremove=deltamiscanthus->root\&.litter;
745   updatebiomass(&miscanthus->root\&.biomass,toadd,toremove);
746   updatebiomass(&miscanthus->root\&.litter,toremove,0\&.0);
747   
748   toadd=deltamiscanthus->rhizome\&.biomass;
749   toremove=deltamiscanthus->rhizome\&.litter;
750   updatebiomass(&miscanthus->rhizome\&.biomass,toadd,toremove);
751   updatebiomass(&miscanthus->rhizome\&.litter,toremove,0\&.0);
752    return;
753 }
.fi
.SS "void decomposeCROPCENT (struct \fBcropcentlayer\fP *CROPCENT, intwoody, intEflag)"

.SS "void decomposeMETABC1 (struct \fBmetabc1\fP *metabc1, struct \fBcropcentEnvironment\fP *ENV, intflag, intEflag)"

.SS "void decomposeMETABC2 (struct \fBmetabc2\fP *metabc2, struct \fBcropcentEnvironment\fP *ENV, intflag, intEflag)"

.SS "void decomposeSOM1C1 (struct \fBsom1c1\fP *som1c1, struct \fBcropcentEnvironment\fP *ENV, intflag, intEflag)"

.SS "void decomposeSOM1C2 (struct \fBsom1c2\fP *som1c2, struct \fBcropcentEnvironment\fP *ENV, intflag, intEflag)"

.SS "void decomposeSOM2C2 (struct \fBsom2c2\fP *som2c2, struct \fBcropcentEnvironment\fP *ENV, intflag, intEflag)"

.SS "void decomposeSOM3C (struct \fBsom3c\fP *som3c, struct \fBcropcentEnvironment\fP *ENV, intflag, intEflag)"

.SS "void decomposeSTRUCC1 (struct \fBstrucc1\fP *strucc1, struct \fBcropcentEnvironment\fP *ENV, intflag, intEflag)"

.SS "void decomposeSTRUCC2 (struct \fBstrucc2\fP *strucc2, struct \fBcropcentEnvironment\fP *ENV, intflag, intEflag)"

.SS "void decomposeWOOD1 (struct \fBwood1\fP *wood1, struct \fBcropcentEnvironment\fP *ENV, intflag, intEflag)"

.SS "void decomposeWOOD2 (struct \fBwood2\fP *wood2, struct \fBcropcentEnvironment\fP *ENV, intflag, intEflag)"

.SS "void decomposeWOOD3 (struct \fBwood3\fP *wood3, struct \fBcropcentEnvironment\fP *ENV, intflag, intEflag)"

.SS "double GetAnerbFac (struct \fBAnaerobicParms\fP *ANEREFF, doublePET, doubleAWC, doubledrainage)"

.SS "void GetBioCroToCropcentParms (struct \fBBioCroToCropcentParms\fP *temp, double *getbiocrotocropcentparmsfromR)"

.PP
.nf
674                                                                                                          {
675   
676   temp->structometaSLOPE=-0\&.013;
677   temp->structometaINTERCEP=0\&.85;
678   temp->surfacedamrN=0\&.0;
679   temp->surfacedamrP=0\&.0;
680   temp->surfacedamrS=0\&.01;
681   temp->surfacedamrK=0\&.0;
682   temp->soildamrN=0\&.02;
683   temp->soildamrP=0\&.02;
684   temp->soildamrS=0\&.04;
685   temp->soildamrK=0\&.0;
686   temp->mindamrN=15\&.0;
687   temp->mindamrP=150\&.0;
688   temp->mindamrS=150\&.0;
689   temp->mindamrK=0\&.0;
690   temp->pabres=100;
691   return;
692 }
.fi
.SS "void GetC13Parms (struct \fBC13Parms\fP *temp, double *getc13parmsfromR)"

.PP
.nf
645 { 
646   temp->DRESP=0\&.999; 
647   temp->DLIGDF=-4\&.0;
648   return;
649 }
.fi
.SS "void GetCropCentStateVar (struct \fBcropcentEnvironment\fP *ENV, double *getcropcentstatevarfromR)"

.PP
.nf
448                                                                                            {
449   
450   ENV->minN=1e-6;
451   ENV->minP=5\&.0;
452   ENV->minS=5\&.0;
453   ENV->minK=5\&.0;
454   ENV->surfaceTEMP=25\&.0;
455   ENV->soilTEMP=25\&.0;
456   ENV->surfaceRELWC=0\&.3;
457   ENV->soilRELWC=0\&.3;
458   ENV->leachedWATER=0\&.0;
459   ENV->PET=0\&.8;
460   ENV->AWC=0\&.8;
461   ENV->soilrad=100\&.0; // check unit for this variable
462   ENV->pH=7\&.0;
463   ENV->drainage=0\&.5;
464   /***************************/
465   if(ENV->minN <1e-6) ENV->minN=1e-6;
466   /*****************************/
467   return;
468 }
.fi
.SS "void getdailyclimate (struct \fBdailyclimate\fP *dailyclimate, int *doy, double *solar, double *temp, double *rh, double *windspeed, double *precip, intcurrenthour, intvecsize)"

.PP
.nf
688 {
689   //For the first hour after planting
690   int i,indx;
691   if ((currenthour==0)||(currenthour==vecsize))
692       {
693          dailyclimate->doy=*(doy+currenthour);
694          dailyclimate->solar=*(solar+currenthour);
695          dailyclimate->temp=*(temp+currenthour);
696          dailyclimate->rh=*(rh+currenthour);
697          dailyclimate->windspeed=*(windspeed+currenthour);
698          dailyclimate->precip=*(precip+currenthour);
699          dailyclimate->minimumTemp=*(temp+currenthour);
700       }
701    else
702       {
703         dailyclimate->solar=0\&.0;
704         dailyclimate->temp=0\&.0;
705         dailyclimate->minimumTemp=*(temp+currenthour);
706         dailyclimate->rh=0\&.0;
707         dailyclimate->windspeed=0\&.0;
708         dailyclimate->precip=0\&.0;
709           for(i=1;i<=24;i++)
710             {
711               indx = currenthour-i+1;      
712               dailyclimate->solar+=*(solar+indx);
713               dailyclimate->temp+=*(temp+indx);
714               dailyclimate->rh+=*(rh+indx);
715               dailyclimate->windspeed+=*(windspeed+indx);
716               dailyclimate->precip+=*(precip+indx);
717               dailyclimate->minimumTemp=(dailyclimate->minimumTemp>(*(temp+indx)))?(*(temp+indx)):dailyclimate->minimumTemp;
718             }
719             dailyclimate->solar=dailyclimate->solar/24\&.0;
720             dailyclimate->temp=dailyclimate->temp/24\&.0;
721             dailyclimate->rh=dailyclimate->rh/24\&.0;
722             dailyclimate->windspeed= dailyclimate->windspeed/24\&.0;
723             dailyclimate->doy=*(doy+currenthour);
724       }
725      return;     
726 }
.fi
.SS "double Getdefac (struct \fBTempEffectParms\fP *Temp, struct \fBSoilWaterEffectParms\fP *swc, doubleRELWC, doubleTEMP)"

.SS "void GetErosionParms (struct \fBErosionParms\fP *temp, double *geterosionparmsfromR)"

.PP
.nf
651                                                                             {
652   
653   temp->LHZF[0]=0\&.2; 
654   temp->LHZF[1]=0\&.4;
655   temp->LHZF[2]=0\&.8;
656   temp->EDEPTH=0\&.2; 
657   temp->ENRICH=2\&.0;
658   return;
659 }
.fi
.SS "void getfrostparms (struct \fBfrostParms\fP *frostparms)"

.PP
.nf
431 {
432    frostparms->leafT0=0\&.0;
433    frostparms->leafT100=-5\&.0;
434    frostparms->stemT0=0\&.0;
435    frostparms->stemT100=-10\&.0;
436    frostparms->rootT0=-200\&.0;
437    frostparms->rootT100=-200\&.0;
438    frostparms->rhizomeT0=-200\&.0;
439    frostparms->rhizomeT100=-200\&.0;
440    return;
441 }
.fi
.SS "void GetInFlowCERatio (struct \fBflowrestriction\fP *INFLOWRESTRICT, struct \fBminerals\fP *output, struct \fBcropcentEnvironment\fP *ENV)"

.PP
.nf
583                                                                                                                        {
584   /****************************************
585    * Purpose:
586    * This function calculates CE ratio of the flow structure flow nased on cropcent environment and restriction critera
587    * Input
588    * cropcent Environment ENV
589    * flow restriction criteria input
590    * OUTPUT
591    * flow structure output
592    * **************************************/
593    double temp;
594 
595         if(ENV->minN <= 0\&.0) // when mineral N is too low in the crocent environment
596         {
597           output->CN=INFLOWRESTRICT->maxCN;
598         }
599         if((ENV->minN > 0\&.0)&&(ENV->minN < INFLOWRESTRICT->minN)) // when mineral N is sufficient but lower than required to obtain MINIMUM CN ratio of flow
600         {
601           temp=(1\&.0-ENV->minN)/INFLOWRESTRICT->minN;
602           output->CN=temp*(INFLOWRESTRICT->maxCN-INFLOWRESTRICT->minCN)+INFLOWRESTRICT->minCN;
603         }
604         if(ENV->minN >= INFLOWRESTRICT->minN)// when mineral N of crocent environment is greater than what is required for min CN ratio of INFLOWRESTRICT
605         {
606           output->CN=INFLOWRESTRICT->minCN;
607         }
608   return;
609 }
.fi
.SS "struct \fBflow\fP GetLeachate (doubletcflow, struct \fBminerals\fP *E, doubleleachedWATER, doublesand, struct \fBOrgLeachParms\fP *temp)"

.SS "double getLeafSenescence (struct \fBleaf\fP *leaf, doublecriticalTT, doublesenefracion, doubleTemp, struct \fBfrostParms\fP *frostparms, doubleTT, struct \fBcanopyparms\fP *canopyparm)"

.PP
.nf
299 {
300   /******************************************************
301    * Purpose:
302    * This function calculates Leaf Senescence
303    * 
304    * Input Arguments:
305    * stem : is a pointer to stem structure
306    * criticalTT: is critical value of accumulated thermal time where senesence begins
307    * Temp: minimum daily temperature
308    * frostparms: is a pointer to structure containing parameters to somulate damage due to frost
309    * TT: is current [daily] value of accumutaed thermal time
310    * 
311    * Output/Returns
312    * Biomass  to be semesced due to aging (thermal time) and frost, together
313    * ****************************************************/
314   double ttsen, frostsen, Nsen;
315   double totalsen;
316   Nsen=0\&.0;
317   ttsen=getThermalSenescence(criticalTT,TT,leaf->biomass,senefraction);
318 //  Rprintf("TSEN=%f,critcalT=%f, TT=%f, biomass=%f, senfraction=%f \n",ttsen,criticalTT, TT,leaf->biomass,senefraction);
319   frostsen=getFrostdamage(frostparms->leafT0,frostparms->leafT100, Temp,leaf->biomass);
320   // Nsen=canopyNsenescence(leaf, canopyparm->SLA, canopyparm->kN,canopyparm->leafNsen);
321   totalsen=ttsen+frostsen+Nsen;
322   totalsen= (totalsen>(leaf->biomass))?(leaf->biomass):totalsen;
323   return(totalsen);
324 }
.fi
.SS "double GetMDR (doublea, doubleb, doublex1, doublex2, doublesoilrad)"

.SS "double GetMTI (doublea, doubleb, doublex1, doublex2, doublesoilrad)"

.SS "double GetPHfac (struct \fBPHParms\fP *PHEFF, doublepH)"

.SS "double getRhizomeSenescence (struct \fBrhizome\fP *rhizome, doublecriticalTT, doublesenefracion, doubleTemp, struct \fBfrostParms\fP *frostparms, doubleTT)"

.PP
.nf
379 {
380   /******************************************************
381    * Purpose:
382    * This function calculates Root Senescence
383    * 
384    * Input Arguments:
385    * stem : is a pointer to stem structure
386    * criticalTT: is critical value of accumulated thermal time where senesence begins
387    * Temp: minimum daily temperature
388    * frostparms: is a pointer to structure containing parameters to somulate damage due to frost
389    * TT: is current [daily] value of accumutaed thermal time
390    * 
391    * Output/Returns
392    * Biomass  to be senesced due to aging (thermal time) and frost, together
393    * ****************************************************/
394   double ttsen, frostsen;
395   double totalsen;
396   frostsen=0\&.0;
397   ttsen=getThermalSenescence(criticalTT,TT,rhizome->biomass,senefracion);
398   frostsen=getFrostdamage(frostparms->rhizomeT0, frostparms->rhizomeT100, Temp,rhizome->biomass);
399   totalsen=ttsen+frostsen;
400   totalsen= (totalsen>(rhizome->biomass))?(rhizome->biomass):totalsen;
401   return(totalsen);
402 }
.fi
.SS "double getRootSenescence (struct \fBroot\fP *root, doublecriticalTT, doublesenefracion, doubleTemp, struct \fBfrostParms\fP *frostparms, doubleTT)"

.PP
.nf
353 {
354   /******************************************************
355    * Purpose:
356    * This function calculates Root Senescence
357    * 
358    * Input Arguments:
359    * stem : is a pointer to stem structure
360    * criticalTT: is critical value of accumulated thermal time where senesence begins
361    * Temp: minimum daily temperature
362    * frostparms: is a pointer to structure containing parameters to somulate damage due to frost
363    * TT: is current [daily] value of accumutaed thermal time
364    * 
365    * Output/Returns
366    * Biomassto be semesced due to aging (thermal time) and frost, together
367    * ****************************************************/
368   double ttsen, frostsen;
369   double totalsen;
370   frostsen=0\&.0;
371   ttsen=getThermalSenescence(criticalTT,TT,root->biomass,senefracion);
372   frostsen=getFrostdamage(frostparms->rootT0, frostparms->rootT100, Temp,root->biomass);
373   totalsen=ttsen+frostsen;
374   totalsen= (totalsen>(root->biomass))?(root->biomass):totalsen;
375   return(totalsen);
376 }
.fi
.SS "void getsenescenceparms (struct \fBsenthermaltemp\fP *senparms)"

.PP
.nf
443 {
444     senparms->leafcriticalT = 3600;
445     senparms->leaffr=0\&.05;
446     senparms->stemcriticalT = 3600;
447     senparms->stemfr=0\&.02;
448     senparms->rootcriticalT = 3600;
449     senparms->rootfr=0\&.05;
450     senparms->rhizomecriticalT = 3600;
451     senparms->rhizomefr=0\&.001;
452   return;
453 }
.fi
.SS "void GetSoilTexture (struct \fBSoilTexture\fP *temp, double *getsoiltexturefromR)"

.PP
.nf
661                                                                            {
662 /**************************************************************************
663 //  I am chaning it back to constant value to avoid error now as ther eis not pointer passed from R for now
664   temp->sand=*getsoiltexturefromR;
665   temp->silt=*(getsoiltexturefromR+1);
666   temp->clay=*(getsoiltexturefromR+2);
667   *************************************************************************/
668   temp->sand=0\&.33;
669   temp->silt=0\&.33;
670   temp->clay=0\&.34;
671   return;
672 }
.fi
.SS "double getStemSenescence (struct \fBstem\fP *stem, doublecriticalTT, doublesenefracion, doubleTemp, struct \fBfrostParms\fP *frostparms, doubleTT)"

.PP
.nf
327 {
328   /******************************************************
329    * Purpose:
330    * This function calculates Stem Senescence
331    * 
332    * Input Arguments:
333    * stem : is a pointer to stem structure
334    * criticalTT: is critical value of accumulated thermal time where senesence begins
335    * Temp: minimum daily temperature
336    * frostparms: is a pointer to structure containing parameters to somulate damage due to frost
337    * TT: is current [daily] value of accumutaed thermal time
338    * 
339    * Output/Returns
340    * Biomass to be semesced due to aging (thermal time) and frost, together
341    * ****************************************************/
342   double ttsen, frostsen;
343   double totalsen;
344   frostsen=0\&.0;
345   ttsen=getThermalSenescence(criticalTT,TT,stem->biomass,senefracion);
346   frostsen=getFrostdamage(frostparms->stemT0, frostparms->stemT100, Temp,stem->biomass);
347   totalsen=ttsen+frostsen;
348   totalsen= (totalsen>(stem->biomass))?(stem->biomass):totalsen;
349   return(totalsen);
350 }
.fi
.SS "void GetSymbNFixationParms (struct \fBSymbNFixationParms\fP *temp, double *getsymbnfixationparmsfromR)"

.PP
.nf
621 {//Rprintf("%f, %f, %f \n", *getsymbnfixationparmsfromR,*(getsymbnfixationparmsfromR+1),*(getsymbnfixationparmsfromR+2));
622   temp->FXMCA=-0\&.125;
623   temp->FXMCB=0\&.005;
624   temp->FXMXS=0\&.35;
625   temp->FXNPB=7\&.0;
626   temp->NSNFIX=0;
627   temp->NTSPM=4\&.0;
628   return;
629 }
.fi
.SS "double getThermalSenescence (doublecriticalTT, doublecurrentTT, doublebiomass, doubledailyfractionalloss)"

.PP
.nf
214 {
215   /*************************************
216    * Purpose
217    * To calculate senescence as a constant fraction of exisiting biomass after a critical threshold temperature
218    * Input:
219    * criticalTT: This is critical Thermal temperature, beyond which senescence begins
220    * currentTT: Current thermal TT or phenological stage
221    * biomass: Exisiting biomass
222    * dailyfractionalloss: Fraction of biomass which will be lost
223    * Output:
224    * 
225    * Returns senesced biomass
226    * 
227    * **********************************/
228    double tmp;
229   if(currentTT <= criticalTT)
230   {
231    tmp=0\&.0;
232   }
233   else
234   {
235    tmp=biomass*dailyfractionalloss;
236   }
237   return(tmp);
238 }
.fi
.SS "double getThermaltime (doubletemp, doubleTbase)"

.PP
.nf
206 {
207   double res;
208   res =(temp<=Tbase)? 0\&.0:(temp-Tbase);
209   return(res);
210 }
.fi
.SS "double line (doublex, doublex1, doubley1, doublex2, doubley2)"

.SS "double newbiomass (doubleAcanopyNet, doublek, doubleGrowthRespCoeff)"

.PP
.nf
423 {
424   double tmp;
425   
426   tmp=(k>=0\&.0)?AcanopyNet*k/(1+GrowthRespCoeff):0\&.0;
427   return(tmp);
428 }
.fi
.SS "void printcropcentout (struct \fBcropcentlayer\fPCROPCENT, double *totalSOC, double *strucc1, double *strucc2, double *metabc1, double *metabc2, double *som1c1, double *som1c2, double *som2c1, double *som2c2, double *som3c, double *minN)"

.PP
.nf
8                                                                     {
9   double cbalance;
10   
11   *totalSOC = CROPCENT\&.strucc1\&.C\&.totalC +CROPCENT\&.strucc2\&.C\&.totalC+CROPCENT\&.metabc1\&.C\&.totalC+CROPCENT\&.metabc2\&.C\&.totalC
12               +CROPCENT\&.som1c1\&.C\&.totalC+CROPCENT\&.som1c2\&.C\&.totalC + CROPCENT\&.som2c1\&.C\&.totalC+CROPCENT\&.som2c2\&.C\&.totalC
13               +CROPCENT\&.som3c\&.C\&.totalC;
14               
15       *strucc1 = CROPCENT\&.strucc1\&.C\&.totalC;
16       *strucc2 = CROPCENT\&.strucc2\&.C\&.totalC;
17       *metabc1 = CROPCENT\&.metabc1\&.C\&.totalC;
18       *metabc2 = CROPCENT\&.metabc2\&.C\&.totalC;
19       *som1c1 = CROPCENT\&.som1c1\&.C\&.totalC;
20       *som1c2 = CROPCENT\&.som1c2\&.C\&.totalC;
21        *som2c1 = CROPCENT\&.som2c1\&.C\&.totalC;
22       *som2c2 = CROPCENT\&.som2c2\&.C\&.totalC;
23        *som3c = CROPCENT\&.som3c\&.C\&.totalC;
24        *minN=CROPCENT\&.ENV\&.minN;
25      
26               
27   /*
28   Rprintf("SOM1c1\n");
29   Rprintf("heterotrophic Respiration = %f\n",CROPCENT\&.som1c1\&.Flux\&.hetresp);
30   cbalance=CROPCENT\&.som1c1\&.Flux\&.som1c1TOsom1c1\&.C\&.totalC+CROPCENT\&.som1c1\&.Flux\&.som1c1TOsom2c1\&.C\&.totalC+CROPCENT\&.som1c1\&.Flux\&.hetresp;
31   Rprintf("Cbalance=%f\n",cbalance);
32   
33   Rprintf("SOM1c2\n");
34   Rprintf("heterotrophic Respiration = %f\n",CROPCENT\&.som1c2\&.Flux\&.hetresp);
35    cbalance=CROPCENT\&.som1c2\&.Flux\&.som1c2TOsom1c2\&.C\&.totalC+CROPCENT\&.som1c2\&.Flux\&.som1c2TOsom2c2\&.C\&.totalC+CROPCENT\&.som1c2\&.Flux\&.hetresp
36   +CROPCENT\&.som1c2\&.Flux\&.som1c2TOsom3c\&.C\&.totalC+CROPCENT\&.som1c2\&.Flux\&.som1c2TOleachate\&.C\&.totalC;
37   Rprintf("Cbalance=%f\n",cbalance);
38   Rprintf("leachate Losses = %f\n",CROPCENT\&.som1c2\&.Flux\&.som1c2TOleachate\&.C\&.totalC);
39   Rprintf("leachate CN = %f, som1c2 CN= %f\n",CROPCENT\&.som1c2\&.Flux\&.som1c2TOleachate\&.E\&.CP,CROPCENT\&.som1c2\&.E\&.CP);
40   
41   Rprintf("SOM2c1\n");
42   Rprintf("heterotrophic Respiration = %f\n",CROPCENT\&.som2c1\&.Flux\&.hetresp);
43   cbalance=CROPCENT\&.som2c1\&.Flux\&.som2c1TOsom2c1\&.C\&.totalC+CROPCENT\&.som2c1\&.Flux\&.som2c1TOsom1c1\&.C\&.totalC+CROPCENT\&.som2c1\&.Flux\&.hetresp
44   +CROPCENT\&.som2c1\&.Flux\&.som2c1TOsom2c2\&.C\&.totalC;
45   Rprintf("Cbalance=%f\n",cbalance);
46   
47   
48   Rprintf("SOM2c2\n");
49   Rprintf("heterotrophic Respiration = %f\n",CROPCENT\&.som2c2\&.Flux\&.hetresp);
50   cbalance=CROPCENT\&.som3c\&.Flux\&.som3cTOsom3c\&.C\&.totalC+CROPCENT\&.som3c\&.Flux\&.som3cTOsom1c2\&.C\&.totalC+CROPCENT\&.som3c\&.Flux\&.hetresp;
51   Rprintf("Cbalance=%f\n",cbalance);
52   
53   
54   Rprintf("SOM3c\n");
55   Rprintf("heterotrophic Respiration = %f\n",CROPCENT\&.som3c\&.Flux\&.hetresp);
56   cbalance=CROPCENT\&.som3c\&.Flux\&.som3cTOsom3c\&.C\&.totalC+CROPCENT\&.som3c\&.Flux\&.som3cTOsom1c2\&.C\&.totalC+CROPCENT\&.som3c\&.Flux\&.hetresp;
57   Rprintf("Cbalance=%f\n",cbalance);
58   
59   
60    //  Printing wood1
61     Rprintf("WOOD1\n");
62   Rprintf("heterotrophic Respiration = %f\n",CROPCENT\&.wood1\&.Flux\&.hetresp);
63   Rprintf("wood1TOSOM1C1, totalC=%f \n",CROPCENT\&.wood1\&.Flux\&.wood1TOsom1c1\&.C\&.totalC);
64   Rprintf("wood1TOSOM2C1, totalC=%f \n",CROPCENT\&.wood1\&.Flux\&.wood1TOsom2c1\&.C\&.totalC);
65   Rprintf("wood1TOwood1, totalC=%f \n",CROPCENT\&.wood1\&.Flux\&.wood1TOwood1\&.C\&.totalC);
66   
67   cbalance=CROPCENT\&.wood1\&.Flux\&.wood1TOwood1\&.C\&.totalC+CROPCENT\&.wood1\&.Flux\&.wood1TOsom2c1\&.C\&.totalC
68   +CROPCENT\&.wood1\&.Flux\&.wood1TOsom1c1\&.C\&.totalC+CROPCENT\&.wood1\&.Flux\&.hetresp;
69   
70   Rprintf("Flux Balance of strucc1=%f\n",cbalance);
71   Rprintf("Environmental Mineral N= %f\n",CROPCENT\&.ENV\&.minN);
72   
73   Rprintf("wood1TOSOM1C2, CN=%f \n",CROPCENT\&.wood1\&.Flux\&.wood1TOsom1c1\&.E\&.CN);
74   Rprintf("wood1TOSOM2C2, CN=%f \n",CROPCENT\&.wood1\&.Flux\&.wood1TOsom2c1\&.E\&.CN);
75   Rprintf("wood1TOwood1, CN=%f \n",CROPCENT\&.wood1\&.Flux\&.wood1TOwood1\&.E\&.CN);
76   
77  Rprintf("METABC2\n");
78   Rprintf("heterotrophic Respiration = %f\n",CROPCENT\&.metabc2\&.Flux\&.hetresp);
79   Rprintf("METABC2TOSOM1C2, totalC=%f \n",CROPCENT\&.metabc2\&.Flux\&.metabc2TOsom1c2\&.C\&.totalC);
80   Rprintf("METABC2TOMETABC2, totalC=%f \n",CROPCENT\&.metabc2\&.Flux\&.metabc2TOmetabc2\&.C\&.totalC);
81   
82   cbalance=CROPCENT\&.metabc2\&.Flux\&.metabc2TOmetabc2\&.C\&.totalC+CROPCENT\&.metabc2\&.Flux\&.metabc2TOsom1c2\&.C\&.totalC
83   +CROPCENT\&.metabc2\&.Flux\&.hetresp;
84   Rprintf("Flux Balance of metabc2=%f\n",cbalance);
85   Rprintf("Environmental Mineral N= %f\n",CROPCENT\&.ENV\&.minN);
86   Rprintf("METABC2TOMETABC2, CN=%f \n",CROPCENT\&.metabc2\&.Flux\&.metabc2TOmetabc2\&.E\&.CN);
87   Rprintf("METABC2TOSOM1C2, CN=%f \n",CROPCENT\&.metabc2\&.Flux\&.metabc2TOsom1c2\&.E\&.CN);
88 
89   
90  Rprintf("METABC1\n");
91   Rprintf("heterotrophic Respiration = %f\n",CROPCENT\&.metabc1\&.Flux\&.hetresp);
92   Rprintf("METABC1TOSOM1C1, totalC=%f \n",CROPCENT\&.metabc1\&.Flux\&.metabc1TOsom1c1\&.C\&.totalC);
93   Rprintf("METABC1TOMETABC1, totalC=%f \n",CROPCENT\&.metabc1\&.Flux\&.metabc1TOmetabc1\&.C\&.totalC);
94   
95   cbalance=CROPCENT\&.metabc1\&.Flux\&.metabc1TOmetabc1\&.C\&.totalC+CROPCENT\&.metabc1\&.Flux\&.metabc1TOsom1c1\&.C\&.totalC
96   +CROPCENT\&.metabc1\&.Flux\&.hetresp;
97   Rprintf("Flux Balance of strucc1=%f\n",cbalance);
98 
99   
100   Rprintf("Environmental Mineral N= %f\n",CROPCENT\&.ENV\&.minN);
101   
102   Rprintf("METABC1TOMETABC1, CN=%f \n",CROPCENT\&.metabc1\&.Flux\&.metabc1TOmetabc1\&.E\&.CN);
103   Rprintf("METABC1TOSOM1C1, CN=%f \n",CROPCENT\&.metabc1\&.Flux\&.metabc1TOsom1c1\&.E\&.CN);
104 
105   //  Printing strucc2
106   Rprintf("heterotrophic Respiration = %f\n",CROPCENT\&.strucc2\&.Flux\&.hetresp);
107   Rprintf("STRUCC2TOSOM1C2, totalC=%f \n",CROPCENT\&.strucc2\&.Flux\&.strucc2TOsom1c2\&.C\&.totalC);
108   Rprintf("STRUCC2TOSOM2C2, totalC=%f \n",CROPCENT\&.strucc2\&.Flux\&.strucc2TOsom2c2\&.C\&.totalC);
109   Rprintf("STRUCC2TOSTRUCC2, totalC=%f \n",CROPCENT\&.strucc2\&.Flux\&.strucc2TOstrucc2\&.C\&.totalC);
110   
111   cbalance=CROPCENT\&.strucc2\&.Flux\&.strucc2TOstrucc2\&.C\&.totalC+CROPCENT\&.strucc2\&.Flux\&.strucc2TOsom2c2\&.C\&.totalC
112   +CROPCENT\&.strucc2\&.Flux\&.strucc2TOsom1c2\&.C\&.totalC+CROPCENT\&.strucc2\&.Flux\&.hetresp;
113   
114   Rprintf("Flux Balance of strucc1=%f\n",cbalance);
115   Rprintf("Environmental Mineral N= %f\n",CROPCENT\&.ENV\&.minN);
116   
117   Rprintf("STRUCC2TOSOM1C2, CN=%f \n",CROPCENT\&.strucc2\&.Flux\&.strucc2TOsom1c2\&.E\&.CN);
118   Rprintf("STRUCC2TOSOM2C2, CN=%f \n",CROPCENT\&.strucc2\&.Flux\&.strucc2TOsom2c2\&.E\&.CN);
119   Rprintf("STRUCC2TOSTRUCC2, CN=%f \n",CROPCENT\&.strucc2\&.Flux\&.strucc2TOstrucc2\&.E\&.CN);
120 */
121  // Printing STRUCC1
122  /*
123    Rprintf("C Pool = %f\n", CROPCENT\&.strucc1\&.C\&.totalC);
124    Rprintf("C Pool unlablto labl Ratio= %f \n", CROPCENT\&.strucc1\&.C\&.unlablTOlabl);
125   Rprintf("heterotrophic Respiration = %f\n",CROPCENT\&.strucc1\&.Flux\&.hetresp);
126   Rprintf("STRUCC1TOMETABC1, totalC=%f \n",CROPCENT\&.strucc1\&.Flux\&.strucc1TOmetabc1\&.C\&.totalC);
127   Rprintf("STRUCC1TOSOM1C1, totalC=%f \n",CROPCENT\&.strucc1\&.Flux\&.strucc1TOsom1c1\&.C\&.totalC);
128   Rprintf("STRUCC1TOSOM2C1, totalC=%f \n",CROPCENT\&.strucc1\&.Flux\&.strucc1TOsom2c1\&.C\&.totalC);
129   Rprintf("STRUCC1TOSTRUCC1, totalC=%f \n",CROPCENT\&.strucc1\&.Flux\&.strucc1TOstrucc1\&.C\&.totalC);
130   
131   cbalance=CROPCENT\&.strucc1\&.Flux\&.strucc1TOstrucc1\&.C\&.totalC+CROPCENT\&.strucc1\&.Flux\&.strucc1TOsom2c1\&.C\&.totalC
132   +CROPCENT\&.strucc1\&.Flux\&.strucc1TOsom1c1\&.C\&.totalC+CROPCENT\&.strucc1\&.Flux\&.strucc1TOmetabc1\&.C\&.totalC
133   +CROPCENT\&.strucc1\&.Flux\&.hetresp;
134   
135   Rprintf("Flux Balance of strucc1=%f\n",cbalance);
136   Rprintf("Environmental Mineral N= %f\n",CROPCENT\&.ENV\&.minN);
137   
138   Rprintf("STRUCC1TOMETABC1, CN=%f \n",CROPCENT\&.strucc1\&.Flux\&.strucc1TOmetabc1\&.E\&.CN);
139   Rprintf("STRUCC1TOSOM1C1, CN=%f \n",CROPCENT\&.strucc1\&.Flux\&.strucc1TOsom1c1\&.E\&.CN);
140   Rprintf("STRUCC1TOSOM2C1, CN=%f \n",CROPCENT\&.strucc1\&.Flux\&.strucc1TOsom2c1\&.E\&.CN);
141   Rprintf("STRUCC1TOSTRUCC1, CN=%f \n",CROPCENT\&.strucc1\&.Flux\&.strucc1TOstrucc1\&.E\&.CN);
142   */
143   return;
144   }
.fi
.SS "void replaceMineralStruct (struct \fBminerals\fP *FROM, struct \fBminerals\fP *TO)"

.PP
.nf
611 {
612   TO->CN=FROM->CN;
613   TO->CP=FROM->CP;
614   TO->CS=FROM->CS;
615   TO->CK=FROM->CK;
616   return;
617 }
.fi
.SS "double timescaling (doublek, doublet)"

.SS "void updateafteremergence (struct \fBmiscanthus\fP *miscanthus, struct \fBmanagement\fP *management)"

.PP
.nf
42 {
43   miscanthus->leaf\&.biomass=(management->emergenceparms\&.StoragetoLeaffraction)* miscanthus->rhizome\&.biomass;
44   miscanthus->rhizome\&.biomass= miscanthus->rhizome\&.biomass - miscanthus->leaf\&.biomass;
45   return;
46 }
.fi
.SS "void updateafterharvest (struct \fBmiscanthus\fP *miscanthus, struct \fBmanagement\fP *management)"

.PP
.nf
26 {
27   miscanthus->leaf\&.biomass=(1-management->harvestparms\&.frleaf)*miscanthus->leaf\&.biomass;
28   miscanthus->leaf\&.litter=(1-management->harvestparms\&.frleaflitter)*miscanthus->leaf\&.litter;
29   
30   miscanthus->stem\&.biomass=(1-management->harvestparms\&.frstem)*miscanthus->stem\&.biomass;
31   miscanthus->stem\&.litter=(1-management->harvestparms\&.frstemlitter)*miscanthus->stem\&.litter;
32   
33   miscanthus->root\&.biomass=(1-management->harvestparms\&.frdeadroot)*miscanthus->root\&.biomass;
34   miscanthus->root\&.litter=management->harvestparms\&.frdeadroot*miscanthus->root\&.biomass;
35   
36   miscanthus->rhizome\&.biomass=(1-management->harvestparms\&.frdeadrhizome)*miscanthus->rhizome\&.biomass;
37   miscanthus->rhizome\&.litter=management->harvestparms\&.frdeadrhizome*miscanthus->rhizome\&.biomass;
38   return;
39 }
.fi
.SS "void updatebiomass (double *res, doubletoadd, doubletoremove)"

.PP
.nf
417 {
418   *res=*res+toadd-toremove;
419   return;
420 }
.fi
.SS "void UpdateC3treeAfterEmergence (struct \fBc3tree\fP *willow, struct \fBmanagement\fP *management)"

.PP
.nf
12 {
13   willow->leaf\&.biomass=(management->emergenceparms\&.StoragetoLeaffraction)* willow->rhizome\&.biomass +
14                       (management->emergenceparms\&.StemtoLeaffraction)* willow->stem\&.biomass;
15   willow->rhizome\&.biomass= (1-management->emergenceparms\&.StoragetoLeaffraction)*willow->rhizome\&.biomass;
16   willow->stem\&.biomass=(1-management->emergenceparms\&.StemtoLeaffraction)* willow->stem\&.biomass;
17   return;
18 }
.fi
.SS "void updateCarbonStructure (struct \fBcarbon\fP *toupdateC, struct \fBcarbon\fPflow)"

.SS "void updateCEafterleachate (struct \fBsom1c2\fP *som1c2)"

.SS "void updatecropcentpools (struct \fBcropcentlayer\fP *CROPCENT)"

.PP
.nf
8 {
9   double delN, delP, delS,delK;
10   double out, in;
11   
12   delN=0\&.0;
13   delP=0\&.0;
14   delS=0\&.0;
15   delK=0\&.0;
16   CROPCENT->ENV\&.newminN=0\&.0;
17   CROPCENT->ENV\&.newminP=0\&.0;
18   CROPCENT->ENV\&.newminS=0\&.0;
19   CROPCENT->ENV\&.newminK=0\&.0;
20   
21   // updating strucc1 flux [only source is self-negative outflow]
22   // step 1: chnage in mineral N of CropCENT layer due to flow from strucc1
23   out=(CROPCENT->strucc1\&.Flux\&.strucc1TOstrucc1\&.C\&.totalC)/(CROPCENT->strucc1\&.Flux\&.strucc1TOstrucc1\&.E\&.CN); // This is always negative
24   in=(CROPCENT->strucc1\&.Flux\&.strucc1TOmetabc1\&.C\&.totalC)/(CROPCENT->strucc1\&.Flux\&.strucc1TOmetabc1\&.E\&.CN)
25       +(CROPCENT->strucc1\&.Flux\&.strucc1TOsom1c1\&.C\&.totalC)/(CROPCENT->strucc1\&.Flux\&.strucc1TOsom1c1\&.E\&.CN)
26       +(CROPCENT->strucc1\&.Flux\&.strucc1TOsom2c1\&.C\&.totalC)/(CROPCENT->strucc1\&.Flux\&.strucc1TOsom2c1\&.E\&.CN); // This is always positive
27   delN=out+in; // if this is negative then out > in or mineralization is occurin otherwise immobilization
28   CROPCENT->ENV\&.minN = CROPCENT->ENV\&.minN-delN;
29   CROPCENT->ENV\&.newminN+=delN;
30   // now update CN ratioi snot required as all outflow CE ratio is same as of source pool
31   // finally update C structure of the pool
32   updateCarbonStructure(&CROPCENT->strucc1\&.C, CROPCENT->strucc1\&.Flux\&.strucc1TOstrucc1\&.C);
33   updateCarbonStructure(&CROPCENT->metabc1\&.C, CROPCENT->strucc1\&.Flux\&.strucc1TOmetabc1\&.C);
34   updateMineralStructure(&CROPCENT->metabc1\&.C, &CROPCENT->metabc1\&.E, CROPCENT->strucc1\&.Flux\&.strucc1TOmetabc1\&.C, CROPCENT->strucc1\&.Flux\&.strucc1TOmetabc1\&.E);
35   updateCarbonStructure(&CROPCENT->som1c1\&.C, CROPCENT->strucc1\&.Flux\&.strucc1TOsom1c1\&.C);
36   updateMineralStructure(&CROPCENT->som1c1\&.C, &CROPCENT->som1c1\&.E, CROPCENT->strucc1\&.Flux\&.strucc1TOsom1c1\&.C, CROPCENT->strucc1\&.Flux\&.strucc1TOsom1c1\&.E);
37   updateCarbonStructure(&CROPCENT->som2c1\&.C, CROPCENT->strucc1\&.Flux\&.strucc1TOsom2c1\&.C);
38   updateMineralStructure(&CROPCENT->som2c1\&.C, &CROPCENT->som2c1\&.E, CROPCENT->strucc1\&.Flux\&.strucc1TOsom2c1\&.C, CROPCENT->strucc1\&.Flux\&.strucc1TOsom2c1\&.E);
39 
40   // updating strucc2 flux [ only source is self-negative outflow]
41   out=(CROPCENT->strucc2\&.Flux\&.strucc2TOstrucc2\&.C\&.totalC)/(CROPCENT->strucc2\&.Flux\&.strucc2TOstrucc2\&.E\&.CN); // This is always negative
42   in= (CROPCENT->strucc2\&.Flux\&.strucc2TOsom1c2\&.C\&.totalC)/(CROPCENT->strucc2\&.Flux\&.strucc2TOsom1c2\&.E\&.CN)
43       +(CROPCENT->strucc2\&.Flux\&.strucc2TOsom2c2\&.C\&.totalC)/(CROPCENT->strucc2\&.Flux\&.strucc2TOsom2c2\&.E\&.CN); // This is always positive
44   delN=out+in; // if this is negative then out > in or mineralization is occurin otherwise immobilization
45   CROPCENT->ENV\&.minN = CROPCENT->ENV\&.minN-delN;
46   CROPCENT->ENV\&.newminN+=delN;
47   // now update CN ratio, which does not change because outflow CE is same as CE of pool\&. Only CE ratio of receiving flux changes
48   // finally update C structure of the pool
49   updateCarbonStructure(&CROPCENT->strucc2\&.C, CROPCENT->strucc2\&.Flux\&.strucc2TOstrucc2\&.C);
50   updateCarbonStructure(&CROPCENT->som1c2\&.C, CROPCENT->strucc2\&.Flux\&.strucc2TOsom1c2\&.C);
51   updateMineralStructure(&CROPCENT->som1c2\&.C, &CROPCENT->som1c2\&.E, CROPCENT->strucc2\&.Flux\&.strucc2TOsom1c2\&.C, CROPCENT->strucc2\&.Flux\&.strucc2TOsom1c2\&.E);
52   updateCarbonStructure(&CROPCENT->som2c2\&.C, CROPCENT->strucc2\&.Flux\&.strucc2TOsom2c2\&.C);
53   updateMineralStructure(&CROPCENT->som2c2\&.C, &CROPCENT->som2c2\&.E, CROPCENT->strucc2\&.Flux\&.strucc2TOsom2c2\&.C, CROPCENT->strucc2\&.Flux\&.strucc2TOsom2c2\&.E);
54   
55   // updating metabc1 flux [source is self -negative outflow and from strucc1]
56   out=(CROPCENT->metabc1\&.Flux\&.metabc1TOmetabc1\&.C\&.totalC)/(CROPCENT->metabc1\&.Flux\&.metabc1TOmetabc1\&.E\&.CN); 
57   in=(CROPCENT->metabc1\&.Flux\&.metabc1TOsom1c1\&.C\&.totalC)/(CROPCENT->metabc1\&.Flux\&.metabc1TOsom1c1\&.E\&.CN); 
58   delN=out+in; // if this is negative then out > in or mineralization is occurin otherwise immobilization
59   CROPCENT->ENV\&.minN = CROPCENT->ENV\&.minN-delN;
60   CROPCENT->ENV\&.newminN+=delN;
61   updateCarbonStructure(&CROPCENT->metabc1\&.C, CROPCENT->metabc1\&.Flux\&.metabc1TOmetabc1\&.C);
62   updateCarbonStructure(&CROPCENT->som1c1\&.C, CROPCENT->metabc1\&.Flux\&.metabc1TOsom1c1\&.C);
63   updateMineralStructure(&CROPCENT->som1c1\&.C, &CROPCENT->som1c1\&.E, CROPCENT->metabc1\&.Flux\&.metabc1TOsom1c1\&.C, CROPCENT->metabc1\&.Flux\&.metabc1TOsom1c1\&.E);
64   
65   // updating metabc2 flux [source is self -negative outflow and from strucc1]
66   out=(CROPCENT->metabc2\&.Flux\&.metabc2TOmetabc2\&.C\&.totalC)/(CROPCENT->metabc2\&.Flux\&.metabc2TOmetabc2\&.E\&.CN); 
67   in=(CROPCENT->metabc2\&.Flux\&.metabc2TOsom1c2\&.C\&.totalC)/(CROPCENT->metabc2\&.Flux\&.metabc2TOsom1c2\&.E\&.CN); 
68   delN=out+in; // if this is negative then out > in or mineralization is occurin otherwise immobilization
69   CROPCENT->ENV\&.minN = CROPCENT->ENV\&.minN-delN;
70   CROPCENT->ENV\&.newminN+=delN;
71   updateCarbonStructure(&CROPCENT->metabc2\&.C, CROPCENT->metabc2\&.Flux\&.metabc2TOmetabc2\&.C);
72   updateCarbonStructure(&CROPCENT->som1c2\&.C, CROPCENT->metabc2\&.Flux\&.metabc2TOsom1c2\&.C);
73   updateMineralStructure(&CROPCENT->som1c2\&.C, &CROPCENT->som1c2\&.E, CROPCENT->metabc2\&.Flux\&.metabc2TOsom1c2\&.C, CROPCENT->metabc2\&.Flux\&.metabc2TOsom1c2\&.E);
74   
75   // updating som1c1 Fluxes
76   out=(CROPCENT->som1c1\&.Flux\&.som1c1TOsom1c1\&.C\&.totalC)/(CROPCENT->som1c1\&.Flux\&.som1c1TOsom1c1\&.E\&.CN); 
77   in=(CROPCENT->som1c1\&.Flux\&.som1c1TOsom2c1\&.C\&.totalC)/(CROPCENT->som1c1\&.Flux\&.som1c1TOsom2c1\&.E\&.CN); 
78   delN=out+in; // if this is negative then out > in or mineralization is occurin otherwise immobilization
79   CROPCENT->ENV\&.minN = CROPCENT->ENV\&.minN-delN;
80   CROPCENT->ENV\&.newminN+=delN;
81   updateCarbonStructure(&CROPCENT->som1c1\&.C, CROPCENT->som1c1\&.Flux\&.som1c1TOsom1c1\&.C);
82   updateCarbonStructure(&CROPCENT->som2c1\&.C, CROPCENT->som1c1\&.Flux\&.som1c1TOsom2c1\&.C);
83   updateMineralStructure(&CROPCENT->som2c1\&.C, &CROPCENT->som2c1\&.E, CROPCENT->som1c1\&.Flux\&.som1c1TOsom2c1\&.C, CROPCENT->som1c1\&.Flux\&.som1c1TOsom2c1\&.E);
84   
85   
86   // updating som2c1 Fluxes
87   out=(CROPCENT->som2c1\&.Flux\&.som2c1TOsom2c1\&.C\&.totalC)/(CROPCENT->som2c1\&.Flux\&.som2c1TOsom2c1\&.E\&.CN); 
88   in=(CROPCENT->som2c1\&.Flux\&.som2c1TOsom1c1\&.C\&.totalC)/(CROPCENT->som2c1\&.Flux\&.som2c1TOsom1c1\&.E\&.CN)
89     +(CROPCENT->som2c1\&.Flux\&.som2c1TOsom2c2\&.C\&.totalC)/(CROPCENT->som2c1\&.Flux\&.som2c1TOsom2c2\&.E\&.CN); 
90   delN=out+in; // if this is negative then out > in or mineralization is occurin otherwise immobilization
91   CROPCENT->ENV\&.minN = CROPCENT->ENV\&.minN-delN;
92   CROPCENT->ENV\&.newminN+=delN;
93   updateCarbonStructure(&CROPCENT->som2c1\&.C, CROPCENT->som2c1\&.Flux\&.som2c1TOsom2c1\&.C);
94   updateCarbonStructure(&CROPCENT->som1c1\&.C, CROPCENT->som2c1\&.Flux\&.som2c1TOsom1c1\&.C);
95   updateMineralStructure(&CROPCENT->som1c1\&.C, &CROPCENT->som1c1\&.E, CROPCENT->som2c1\&.Flux\&.som2c1TOsom1c1\&.C, CROPCENT->som2c1\&.Flux\&.som2c1TOsom1c1\&.E);
96   updateCarbonStructure(&CROPCENT->som2c2\&.C, CROPCENT->som2c1\&.Flux\&.som2c1TOsom2c2\&.C);
97   updateMineralStructure(&CROPCENT->som2c2\&.C, &CROPCENT->som2c2\&.E, CROPCENT->som2c1\&.Flux\&.som2c1TOsom2c2\&.C, CROPCENT->som2c1\&.Flux\&.som2c1TOsom2c2\&.E);
98   
99   
100   // updating som1c2 Fluxes
101   out=(CROPCENT->som1c2\&.Flux\&.som1c2TOsom1c2\&.C\&.totalC)/(CROPCENT->som1c2\&.Flux\&.som1c2TOsom1c2\&.E\&.CN); 
102   in=(CROPCENT->som1c2\&.Flux\&.som1c2TOsom2c2\&.C\&.totalC)/(CROPCENT->som1c2\&.Flux\&.som1c2TOsom2c2\&.E\&.CN)
103     +(CROPCENT->som1c2\&.Flux\&.som1c2TOsom3c\&.C\&.totalC)/(CROPCENT->som1c2\&.Flux\&.som1c2TOsom3c\&.E\&.CN)
104     +(CROPCENT->som1c2\&.Flux\&.som1c2TOleachate\&.C\&.totalC)/(CROPCENT->som1c2\&.Flux\&.som1c2TOleachate\&.E\&.CN);
105   delN=out+in; // if this is negative then out > in or mineralization is occurin otherwise immobilization
106   CROPCENT->ENV\&.minN = CROPCENT->ENV\&.minN-delN;
107   CROPCENT->ENV\&.newminN+=delN;
108   updateCarbonStructure(&CROPCENT->som1c2\&.C, CROPCENT->som1c2\&.Flux\&.som1c2TOsom1c2\&.C);
109   // remember here we need to modify CN ratio of the som1c2 pool because CN ratio of leachate loss is much larger
110   // This modified ratio can be obtained in th below function
111   updateCEafterleachate(&CROPCENT->som1c2);
112  
113   updateCarbonStructure(&CROPCENT->som2c2\&.C, CROPCENT->som1c2\&.Flux\&.som1c2TOsom2c2\&.C);
114   updateMineralStructure(&CROPCENT->som2c2\&.C, &CROPCENT->som2c2\&.E, CROPCENT->som1c2\&.Flux\&.som1c2TOsom2c2\&.C, CROPCENT->som1c2\&.Flux\&.som1c2TOsom2c2\&.E);
115    
116   updateCarbonStructure(&CROPCENT->som3c\&.C, CROPCENT->som1c2\&.Flux\&.som1c2TOsom3c\&.C);
117   updateMineralStructure(&CROPCENT->som3c\&.C, &CROPCENT->som3c\&.E, CROPCENT->som1c2\&.Flux\&.som1c2TOsom3c\&.C, CROPCENT->som1c2\&.Flux\&.som1c2TOsom3c\&.E);
118   
119   
120   // updating som2c2 Fluxes
121   out=(CROPCENT->som2c2\&.Flux\&.som2c2TOsom2c2\&.C\&.totalC)/(CROPCENT->som2c2\&.Flux\&.som2c2TOsom2c2\&.E\&.CN); 
122   in=(CROPCENT->som2c2\&.Flux\&.som2c2TOsom3c\&.C\&.totalC)/(CROPCENT->som2c2\&.Flux\&.som2c2TOsom3c\&.E\&.CN)
123     +(CROPCENT->som2c2\&.Flux\&.som2c2TOsom1c2\&.C\&.totalC)/(CROPCENT->som2c2\&.Flux\&.som2c2TOsom1c2\&.E\&.CN); 
124   delN=out+in; // if this is negative then out > in or mineralization is occurin otherwise immobilization
125   CROPCENT->ENV\&.minN = CROPCENT->ENV\&.minN-delN;
126   CROPCENT->ENV\&.newminN+=delN;
127   updateCarbonStructure(&CROPCENT->som2c2\&.C, CROPCENT->som2c2\&.Flux\&.som2c2TOsom2c2\&.C);
128   updateCarbonStructure(&CROPCENT->som1c2\&.C, CROPCENT->som2c2\&.Flux\&.som2c2TOsom1c2\&.C);
129   updateMineralStructure(&CROPCENT->som1c2\&.C, &CROPCENT->som1c2\&.E, CROPCENT->som2c2\&.Flux\&.som2c2TOsom1c2\&.C, CROPCENT->som2c2\&.Flux\&.som2c2TOsom1c2\&.E);
130   updateCarbonStructure(&CROPCENT->som2c2\&.C, CROPCENT->som2c2\&.Flux\&.som2c2TOsom3c\&.C);
131   updateMineralStructure(&CROPCENT->som2c2\&.C, &CROPCENT->som2c2\&.E, CROPCENT->som2c2\&.Flux\&.som2c2TOsom3c\&.C, CROPCENT->som2c2\&.Flux\&.som2c2TOsom3c\&.E);
132  
133  // updating som3c Fluxes
134   out=(CROPCENT->som3c\&.Flux\&.som3cTOsom3c\&.C\&.totalC)/(CROPCENT->som3c\&.Flux\&.som3cTOsom3c\&.E\&.CN); 
135   in=(CROPCENT->som3c\&.Flux\&.som3cTOsom1c2\&.C\&.totalC)/(CROPCENT->som3c\&.Flux\&.som3cTOsom1c2\&.E\&.CN);
136    
137   delN=out+in; // if this is negative then out > in or mineralization is occurin otherwise immobilization
138   CROPCENT->ENV\&.minN = CROPCENT->ENV\&.minN-delN;
139   CROPCENT->ENV\&.newminN+=delN;
140   updateCarbonStructure(&CROPCENT->som3c\&.C, CROPCENT->som3c\&.Flux\&.som3cTOsom3c\&.C);
141   updateCarbonStructure(&CROPCENT->som1c2\&.C, CROPCENT->som3c\&.Flux\&.som3cTOsom1c2\&.C);
142   updateMineralStructure(&CROPCENT->som1c2\&.C, &CROPCENT->som1c2\&.E, CROPCENT->som3c\&.Flux\&.som3cTOsom1c2\&.C, CROPCENT->som3c\&.Flux\&.som3cTOsom1c2\&.E);
143   
144   CROPCENT->ENV\&.newminN=(-1)*CROPCENT->ENV\&.newminN; // Because negative value represents mineralization and net mineralization is postiive for trace gas calculations
145   return;
146 }
.fi
.SS "void UpdateCropcentPoolsFromBioCro (struct \fBcropcentlayer\fP *CROPCENT, struct \fBInputToCropcent\fP *INCROPCENT)"

.SS "void updatedailyvec (struct \fBdailyvec\fP *dailyvec, doublenewbiomass, doublenewlitter, intN, doubledelTT)"

.PP
.nf
405 {
406   int i;
407   for (i=0; i<=N;i++)
408   {
409      dailyvec[i]\&.ageinTT+=delTT;
410   }
411   dailyvec[N]\&.newbiomass=newbiomass;
412   dailyvec[N]\&.newlitter=newlitter;
413   return;
414 }
.fi
.SS "void UpdateDirectAbsorp (struct \fBInputToCropcent\fP *INCROCENT, struct \fBBioCroToCropcentParms\fP *parms, struct \fBcropcentEnvironment\fP *ENV)"

.SS "void updatedormantstage (struct \fBmiscanthus\fP *miscanthus)"

.PP
.nf
759 {
760   double LostinRespiration,availablecarb,newcarb;
761   LostinRespiration=miscanthus->autoresp\&.stemmaint + miscanthus->autoresp\&.rootmaint +  miscanthus->autoresp\&.rhizomemaint;
762   // This loss will occur at the expense of carbohydrate fraction of rhizome, resulting in change in the carbohydrate fraction of the rhizome
763   availablecarb= miscanthus->rhizome\&.biomass*miscanthus->rhizome\&.carbohydratefraction;
764   newcarb=availablecarb-LostinRespiration;
765   miscanthus->rhizome\&.biomass= miscanthus->rhizome\&.biomass- LostinRespiration;
766  
767   if((miscanthus->rhizome\&.carbohydratefraction)<0\&.05)miscanthus->rhizome\&.carbohydratefraction=0\&.05;
768   if(miscanthus->rhizome\&.biomass <0)error("rhizome has become negative");
769 
770 
771   miscanthus->autoresp\&.stemgrowth=0;
772   miscanthus->autoresp\&.rootgrowth=0;
773   miscanthus->autoresp\&.rhizomegrowth=0;
774   miscanthus->autoresp\&.leafdarkresp=0\&.0;
775   miscanthus->autoresp\&.total= LostinRespiration;
776   miscanthus->NPP=miscanthus->GPP-miscanthus->autoresp\&.total;
777   // Do i need to specify root death rate ? or probably Ican simply kill the roots at the time of harvest
778   
779 }
.fi
.SS "void updatelittervec (struct \fBlittervec\fP *littervec, doublenewbiomass, intN, doubledelTT)"

.SS "void updateMineralStructure (struct \fBcarbon\fP *toupdateC, struct \fBminerals\fP *toupdateE, struct \fBcarbon\fPflowC, struct \fBminerals\fPflowE)"

.SS "void UpdateStandingbiomass (double *standing, doublenewbiomass)"

.PP
.nf
639 {
640   *standing= *standing +newbiomass;
641    return;
642 }
.fi
.SS "void UpdateStandingLeaf (struct \fBleaf\fP *leaf, doublenewbiomass, doubledeadleaf, doubleremobFactor)"

.PP
.nf
646 {
647   leaf->biomass+=newbiomass-deadleaf;
648   leaf->litter+=deadleaf*(1-remobFactor);
649   return;
650 }
.fi
.SS "void UpdateStandingRhizome (struct \fBrhizome\fP *rhizome, doublenewbiomass, doubledeadrhizome, doubleremobFactor)"

.PP
.nf
667 {
668   rhizome->biomass+=newbiomass-deadrhizome;
669   rhizome->litter+=deadrhizome*(1-remobFactor);
670   return;
671 }
.fi
.SS "void UpdateStandingRoot (struct \fBroot\fP *root, doublenewbiomass, doubledeadroot, doubleremobFactor)"

.PP
.nf
660 {
661   root->biomass+=newbiomass-deadroot;
662   root->litter+=deadroot*(1-remobFactor);
663   return;
664 }
.fi
.SS "void UpdateStandingStem (struct \fBstem\fP *stem, doublenewbiomass, doubledeadstem, doubleremobFactor)"

.PP
.nf
653 {
654   stem->biomass+=newbiomass-deadstem;
655   stem->litter+=deadstem*(1-remobFactor);
656   return;
657 }
.fi
.SS "void UpdateWillowAfterHarvest (struct \fBc3tree\fP *willow, struct \fBmanagement\fP *management)"

.PP
.nf
58 {
59   willow->leaf\&.biomass=(1-management->harvestparms\&.frleaf)*willow->leaf\&.biomass;
60   willow->leaf\&.litter=(1-management->harvestparms\&.frleaflitter)*willow->leaf\&.litter;
61   
62   willow->stem\&.biomass=(1-management->harvestparms\&.frstem)*willow->stem\&.biomass;
63   willow->stem\&.litter=(1-management->harvestparms\&.frstemlitter)*willow->stem\&.litter;
64   
65   willow->root\&.biomass=(1-management->harvestparms\&.frdeadroot)*willow->root\&.biomass;
66   willow->root\&.litter=management->harvestparms\&.frdeadroot*willow->root\&.biomass;
67   
68   willow->rhizome\&.biomass=(1-management->harvestparms\&.frdeadrhizome)*willow->rhizome\&.biomass;
69   willow->rhizome\&.litter=management->harvestparms\&.frdeadrhizome*willow->rhizome\&.biomass;
70   return;
71 }
.fi
.SS "double weightavg (doubleW1, doublev1, doubleW2, doublev2)"

.SH "Author"
.PP 
Generated automatically by Doxygen for BioCro from the source code\&.
